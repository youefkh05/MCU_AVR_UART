
Task1_source_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001dc  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  0000020b  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000219  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d38  00000000  00000000  00000261  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e0  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ae  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001a28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001be  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  00001c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000015a  0000015a  000001ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dac  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ServoMotor_Initialize 0000001c  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ServoMotor_Rotate 0000002c  000000fc  000000fc  00000170  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000054  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_fini 00000002  00000162  00000162  000001d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_funcs_on_exit 00000002  00000164  00000164  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_simulator_exit 00000002  00000166  00000166  000001da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.exit    00000016  00000144  00000144  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text._Exit   00000004  0000015e  0000015e  000001d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   8:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
   c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  10:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  14:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  18:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  1c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  20:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  24:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  28:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  2c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  30:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  38:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  3c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  40:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  44:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  48:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  4c:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>
  50:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
  a0:	0c 94 a2 00 	jmp	0x144	; 0x144 <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

0000015a <__bad_interrupt>:
 15a:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ServoMotor_Initialize:

00000128 <ServoMotor_Initialize>:

#include "Servo_Private.h"

void ServoMotor_Initialize(void)
{
	DDRD |= (1<<PD5);	/* Make OC1A pin as output */
 128:	81 b3       	in	r24, 0x11	; 17
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	81 bb       	out	0x11, r24	; 17
	TCNT1 = 0;			/* Set timer1 count zero */
 12e:	1d bc       	out	0x2d, r1	; 45
 130:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 2499;		/* Set TOP count for timer1 in ICR1 register */
 132:	83 ec       	ldi	r24, 0xC3	; 195
 134:	99 e0       	ldi	r25, 0x09	; 9
 136:	97 bd       	out	0x27, r25	; 39
 138:	86 bd       	out	0x26, r24	; 38

	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 13a:	82 e8       	ldi	r24, 0x82	; 130
 13c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
 13e:	8b e1       	ldi	r24, 0x1B	; 27
 140:	8e bd       	out	0x2e, r24	; 46
 142:	08 95       	ret

Disassembly of section .text.ServoMotor_Rotate:

000000fc <ServoMotor_Rotate>:
	
}

void ServoMotor_Rotate(servo_angle angle)
{
	OCR1A=((ICR1+1)/4)-angle;
  fc:	26 b5       	in	r18, 0x26	; 38
  fe:	37 b5       	in	r19, 0x27	; 39
 100:	2f 5f       	subi	r18, 0xFF	; 255
 102:	3f 4f       	sbci	r19, 0xFF	; 255
 104:	36 95       	lsr	r19
 106:	27 95       	ror	r18
 108:	36 95       	lsr	r19
 10a:	27 95       	ror	r18
 10c:	28 1b       	sub	r18, r24
 10e:	39 0b       	sbc	r19, r25
 110:	3b bd       	out	0x2b, r19	; 43
 112:	2a bd       	out	0x2a, r18	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	8d e3       	ldi	r24, 0x3D	; 61
 118:	99 e4       	ldi	r25, 0x49	; 73
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <ServoMotor_Rotate+0x1e>
 122:	00 c0       	rjmp	.+0      	; 0x124 <ServoMotor_Rotate+0x28>
 124:	00 00       	nop
 126:	08 95       	ret

Disassembly of section .text.main:

000000a8 <main>:
#include "main.h"

int main(void)
{	int x=0;
	servo_angle angle;
	ServoMotor_Initialize();
  a8:	0e 94 94 00 	call	0x128	; 0x128 <ServoMotor_Initialize>
    while(1)
    {	x++;
		angle=angle_P90;
		
		ServoMotor_Rotate(angle);
  ac:	85 e4       	ldi	r24, 0x45	; 69
  ae:	91 e0       	ldi	r25, 0x01	; 1
  b0:	0e 94 7e 00 	call	0xfc	; 0xfc <ServoMotor_Rotate>
  b4:	2f ef       	ldi	r18, 0xFF	; 255
  b6:	87 ea       	ldi	r24, 0xA7	; 167
  b8:	91 e6       	ldi	r25, 0x61	; 97
  ba:	21 50       	subi	r18, 0x01	; 1
  bc:	80 40       	sbci	r24, 0x00	; 0
  be:	90 40       	sbci	r25, 0x00	; 0
  c0:	e1 f7       	brne	.-8      	; 0xba <main+0x12>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <main+0x1c>
  c4:	00 00       	nop
		_delay_ms(2000);
		angle=angle_0;
		ServoMotor_Rotate(angle);
  c6:	86 eb       	ldi	r24, 0xB6	; 182
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	0e 94 7e 00 	call	0xfc	; 0xfc <ServoMotor_Rotate>
  ce:	2f ef       	ldi	r18, 0xFF	; 255
  d0:	87 ea       	ldi	r24, 0xA7	; 167
  d2:	91 e6       	ldi	r25, 0x61	; 97
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	80 40       	sbci	r24, 0x00	; 0
  d8:	90 40       	sbci	r25, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x2c>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x36>
  de:	00 00       	nop
		_delay_ms(2000);
		angle=angle_N90;
		ServoMotor_Rotate(angle);
  e0:	80 e3       	ldi	r24, 0x30	; 48
  e2:	92 e0       	ldi	r25, 0x02	; 2
  e4:	0e 94 7e 00 	call	0xfc	; 0xfc <ServoMotor_Rotate>
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	87 ea       	ldi	r24, 0xA7	; 167
  ec:	91 e6       	ldi	r25, 0x61	; 97
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	80 40       	sbci	r24, 0x00	; 0
  f2:	90 40       	sbci	r25, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x46>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x50>
  f8:	00 00       	nop
  fa:	d8 cf       	rjmp	.-80     	; 0xac <main+0x4>

Disassembly of section .text.__dummy_fini:

00000162 <_fini>:
 162:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000164 <__funcs_on_exit>:
 164:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000166 <__simulator_exit>:
 166:	08 95       	ret

Disassembly of section .text.exit:

00000144 <exit>:
 144:	ec 01       	movw	r28, r24
 146:	0e 94 b2 00 	call	0x164	; 0x164 <__funcs_on_exit>
 14a:	0e 94 b1 00 	call	0x162	; 0x162 <_fini>
 14e:	ce 01       	movw	r24, r28
 150:	0e 94 b3 00 	call	0x166	; 0x166 <__simulator_exit>
 154:	ce 01       	movw	r24, r28
 156:	0e 94 af 00 	call	0x15e	; 0x15e <_Exit>

Disassembly of section .text._Exit:

0000015e <_Exit>:
 15e:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
