
Task1_source_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000ae  00000264  2**0
                  ALLOC
  2 .bss          00000001  00800060  00800060  00000344  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 0000002a  00000000  00000000  00000373  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000003a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000209e  00000000  00000000  000004f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008dd  00000000  00000000  0000258e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bbb  00000000  00000000  00002e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00003a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000026d  00000000  00000000  00003bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007cd  00000000  00000000  00003e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000045fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00000262  00000262  00000336  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000046c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.Initialize_E2PROM_State 0000000c  00000244  00000244  00000318  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.Read_E2PROM_State 00000006  0000025c  0000025c  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Initialize_TEMP_SENSOR 0000000c  00000250  00000250  00000324  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.DC_Initialize 0000004a  00000190  00000190  00000264  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.main    00000028  000001da  000001da  000002ae  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.DIO_SetPinDirection 000000e2  000000ae  000000ae  00000182  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.__dummy_fini 00000002  0000026a  0000026a  0000033e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.__dummy_funcs_on_exit 00000002  0000026c  0000026c  00000340  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.__dummy_simulator_exit 00000002  0000026e  0000026e  00000342  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.exit    00000016  0000021c  0000021c  000002f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text._Exit   00000004  00000266  00000266  0000033a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.avrlibc 00000012  00000232  00000232  00000306  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.avrlibc 0000001a  00000202  00000202  000002d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2d 00 	jmp	0x5a	; 0x5a <__ctors_end>
   4:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
   8:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
   c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  10:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  14:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  18:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  1c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  20:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  24:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  28:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  2c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  30:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  34:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  38:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  3c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  40:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  44:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  48:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  4c:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>
  50:	0c 94 31 01 	jmp	0x262	; 0x262 <__bad_interrupt>

00000054 <.dinit>:
  54:	00 60       	ori	r16, 0x00	; 0
  56:	00 61       	ori	r16, 0x10	; 16
  58:	80 00       	.word	0x0080	; ????

0000005a <__ctors_end>:
  5a:	11 24       	eor	r1, r1
  5c:	1f be       	out	0x3f, r1	; 63
  5e:	cf e5       	ldi	r28, 0x5F	; 95
  60:	d8 e0       	ldi	r29, 0x08	; 8
  62:	de bf       	out	0x3e, r29	; 62
  64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	40 e0       	ldi	r20, 0x00	; 0
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__do_clear_bss+0x8>
  6e:	b5 91       	lpm	r27, Z+
  70:	a5 91       	lpm	r26, Z+
  72:	35 91       	lpm	r19, Z+
  74:	25 91       	lpm	r18, Z+
  76:	05 91       	lpm	r16, Z+
  78:	07 fd       	sbrc	r16, 7
  7a:	0c c0       	rjmp	.+24     	; 0x94 <__do_clear_bss>
  7c:	95 91       	lpm	r25, Z+
  7e:	85 91       	lpm	r24, Z+
  80:	ef 01       	movw	r28, r30
  82:	f9 2f       	mov	r31, r25
  84:	e8 2f       	mov	r30, r24
  86:	05 90       	lpm	r0, Z+
  88:	0d 92       	st	X+, r0
  8a:	a2 17       	cp	r26, r18
  8c:	b3 07       	cpc	r27, r19
  8e:	d9 f7       	brne	.-10     	; 0x86 <__do_copy_data+0x20>
  90:	fe 01       	movw	r30, r28
  92:	04 c0       	rjmp	.+8      	; 0x9c <__do_clear_bss+0x8>

00000094 <__do_clear_bss>:
  94:	1d 92       	st	X+, r1
  96:	a2 17       	cp	r26, r18
  98:	b3 07       	cpc	r27, r19
  9a:	e1 f7       	brne	.-8      	; 0x94 <__do_clear_bss>
  9c:	e9 35       	cpi	r30, 0x59	; 89
  9e:	f4 07       	cpc	r31, r20
  a0:	31 f7       	brne	.-52     	; 0x6e <__do_copy_data+0x8>
  a2:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  a6:	0c 94 0e 01 	jmp	0x21c	; 0x21c <exit>

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>

Disassembly of section .text:

00000262 <__bad_interrupt>:
 262:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Initialize_E2PROM_State:

00000244 <Initialize_E2PROM_State>:


void Initialize_E2PROM_State(void){
	
	/* It should have a normal state first	*/
	eeprom_write_byte ((uint8_t)EEPROM_State_Add, (uint8_t)Normal_state);	
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	80 e4       	ldi	r24, 0x40	; 64
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 01 01 	call	0x202	; 0x202 <eeprom_write_byte>
 24e:	08 95       	ret

Disassembly of section .text.Read_E2PROM_State:

0000025c <Read_E2PROM_State>:
}

E2PROM_State Read_E2PROM_State (const uint8_t *EEPROM_Add){
	
	/*	read the state	*/
	E2PROM_State x= eeprom_read_byte (EEPROM_Add); 		
 25c:	0e 94 19 01 	call	0x232	; 0x232 <eeprom_read_byte>
	return x;
}
 260:	08 95       	ret

Disassembly of section .text.Initialize_TEMP_SENSOR:

00000250 <Initialize_TEMP_SENSOR>:

#include "LM35_TMP_Sensor_Private.h"

void Initialize_TEMP_SENSOR(void)
{
	DIO_SetPinDirection(TEMP_SEN_PORT, TEMP_SEN_PIN, DIO_OUTPUT);
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 25a:	08 95       	ret

Disassembly of section .text.DC_Initialize:

00000190 <DC_Initialize>:

#include "DC_Private.h"

void DC_Initialize(dc_motor motor)
{
	switch(motor)
 190:	88 23       	and	r24, r24
 192:	19 f0       	breq	.+6      	; 0x19a <DC_Initialize+0xa>
 194:	81 30       	cpi	r24, 0x01	; 1
 196:	89 f0       	breq	.+34     	; 0x1ba <DC_Initialize+0x2a>
 198:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable1_Pin, DC_OUTPUT);
 19a:	41 e0       	ldi	r20, 0x01	; 1
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A1, DC_OUTPUT);
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	61 e0       	ldi	r22, 0x01	; 1
 1a8:	82 e0       	ldi	r24, 0x02	; 2
 1aa:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A2, DC_OUTPUT);
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	62 e0       	ldi	r22, 0x02	; 2
 1b2:	82 e0       	ldi	r24, 0x02	; 2
 1b4:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
		break;
 1b8:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable2_Pin, DC_OUTPUT);
 1ba:	41 e0       	ldi	r20, 0x01	; 1
 1bc:	62 e0       	ldi	r22, 0x02	; 2
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A3, DC_OUTPUT);
 1c4:	41 e0       	ldi	r20, 0x01	; 1
 1c6:	62 e0       	ldi	r22, 0x02	; 2
 1c8:	82 e0       	ldi	r24, 0x02	; 2
 1ca:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A4, DC_OUTPUT);
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	62 e0       	ldi	r22, 0x02	; 2
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
 1d8:	08 95       	ret

Disassembly of section .text.main:

000001da <main>:

int main(void)
{	
	/*		Initializations		*/
	dc_motor DC_fan1=DC_Motor1;
	DC_Initialize(DC_fan1);
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 c8 00 	call	0x190	; 0x190 <DC_Initialize>
	Initialize_E2PROM_State();
 1e0:	0e 94 22 01 	call	0x244	; 0x244 <Initialize_E2PROM_State>
	Initialize_TEMP_SENSOR();
 1e4:	0e 94 28 01 	call	0x250	; 0x250 <Initialize_TEMP_SENSOR>
	DIO_SetPinDirection(BOT1_PORT,BOT1_PIN,DIO_INPUT); //push button 
 1e8:	88 b3       	in	r24, 0x18	; 24
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	60 e0       	ldi	r22, 0x00	; 0
 1ee:	0e 94 57 00 	call	0xae	; 0xae <__data_load_end>
	
	// Read initial state from EEPROM
	currentState = Read_E2PROM_State(EEPROM_State_Add);
 1f2:	60 e4       	ldi	r22, 0x40	; 64
 1f4:	70 e0       	ldi	r23, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 2e 01 	call	0x25c	; 0x25c <Read_E2PROM_State>
 1fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 200:	ff cf       	rjmp	.-2      	; 0x200 <main+0x26>

Disassembly of section .text.DIO_SetPinDirection:

000000ae <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
  ae:	44 23       	and	r20, r20
  b0:	19 f0       	breq	.+6      	; 0xb8 <DIO_SetPinDirection+0xa>
  b2:	41 30       	cpi	r20, 0x01	; 1
  b4:	c9 f1       	breq	.+114    	; 0x128 <DIO_SetPinDirection+0x7a>
  b6:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	91 f0       	breq	.+36     	; 0xe0 <DIO_SetPinDirection+0x32>
  bc:	28 f0       	brcs	.+10     	; 0xc8 <DIO_SetPinDirection+0x1a>
  be:	82 30       	cpi	r24, 0x02	; 2
  c0:	d9 f0       	breq	.+54     	; 0xf8 <DIO_SetPinDirection+0x4a>
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	29 f1       	breq	.+74     	; 0x110 <DIO_SetPinDirection+0x62>
  c6:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
  c8:	2a b3       	in	r18, 0x1a	; 26
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	02 c0       	rjmp	.+4      	; 0xd4 <DIO_SetPinDirection+0x26>
  d0:	88 0f       	add	r24, r24
  d2:	99 1f       	adc	r25, r25
  d4:	6a 95       	dec	r22
  d6:	e2 f7       	brpl	.-8      	; 0xd0 <DIO_SetPinDirection+0x22>
  d8:	80 95       	com	r24
  da:	82 23       	and	r24, r18
  dc:	8a bb       	out	0x1a, r24	; 26
			break;
  de:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
  e0:	27 b3       	in	r18, 0x17	; 23
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_SetPinDirection+0x3e>
  e8:	88 0f       	add	r24, r24
  ea:	99 1f       	adc	r25, r25
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_SetPinDirection+0x3a>
  f0:	80 95       	com	r24
  f2:	82 23       	and	r24, r18
  f4:	87 bb       	out	0x17, r24	; 23
			break;
  f6:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_SetPinDirection+0x56>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_SetPinDirection+0x52>
 108:	80 95       	com	r24
 10a:	82 23       	and	r24, r18
 10c:	84 bb       	out	0x14, r24	; 20
			break;
 10e:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 110:	21 b3       	in	r18, 0x11	; 17
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	02 c0       	rjmp	.+4      	; 0x11c <DIO_SetPinDirection+0x6e>
 118:	88 0f       	add	r24, r24
 11a:	99 1f       	adc	r25, r25
 11c:	6a 95       	dec	r22
 11e:	e2 f7       	brpl	.-8      	; 0x118 <DIO_SetPinDirection+0x6a>
 120:	80 95       	com	r24
 122:	82 23       	and	r24, r18
 124:	81 bb       	out	0x11, r24	; 17
			break;
 126:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	89 f0       	breq	.+34     	; 0x14e <DIO_SetPinDirection+0xa0>
 12c:	28 f0       	brcs	.+10     	; 0x138 <DIO_SetPinDirection+0x8a>
 12e:	82 30       	cpi	r24, 0x02	; 2
 130:	c9 f0       	breq	.+50     	; 0x164 <DIO_SetPinDirection+0xb6>
 132:	83 30       	cpi	r24, 0x03	; 3
 134:	11 f1       	breq	.+68     	; 0x17a <DIO_SetPinDirection+0xcc>
 136:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 138:	2a b3       	in	r18, 0x1a	; 26
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPinDirection+0x96>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPinDirection+0x92>
 148:	82 2b       	or	r24, r18
 14a:	8a bb       	out	0x1a, r24	; 26
			break;
 14c:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 14e:	27 b3       	in	r18, 0x17	; 23
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPinDirection+0xac>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPinDirection+0xa8>
 15e:	82 2b       	or	r24, r18
 160:	87 bb       	out	0x17, r24	; 23
			break;
 162:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 164:	24 b3       	in	r18, 0x14	; 20
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_SetPinDirection+0xc2>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_SetPinDirection+0xbe>
 174:	82 2b       	or	r24, r18
 176:	84 bb       	out	0x14, r24	; 20
			break;
 178:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 17a:	21 b3       	in	r18, 0x11	; 17
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_SetPinDirection+0xd8>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_SetPinDirection+0xd4>
 18a:	82 2b       	or	r24, r18
 18c:	81 bb       	out	0x11, r24	; 17
 18e:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000026a <_fini>:
 26a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000026c <__funcs_on_exit>:
 26c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000026e <__simulator_exit>:
 26e:	08 95       	ret

Disassembly of section .text.exit:

0000021c <exit>:
 21c:	ec 01       	movw	r28, r24
 21e:	0e 94 36 01 	call	0x26c	; 0x26c <__funcs_on_exit>
 222:	0e 94 35 01 	call	0x26a	; 0x26a <_fini>
 226:	ce 01       	movw	r24, r28
 228:	0e 94 37 01 	call	0x26e	; 0x26e <__simulator_exit>
 22c:	ce 01       	movw	r24, r28
 22e:	0e 94 33 01 	call	0x266	; 0x266 <_Exit>

Disassembly of section .text._Exit:

00000266 <_Exit>:
 266:	0e 94 55 00 	call	0xaa	; 0xaa <_exit>

Disassembly of section .text.avrlibc:

00000232 <eeprom_read_byte>:
 232:	cb 01       	movw	r24, r22
 234:	e1 99       	sbic	0x1c, 1	; 28
 236:	fe cf       	rjmp	.-4      	; 0x234 <eeprom_read_byte+0x2>
 238:	9f bb       	out	0x1f, r25	; 31
 23a:	8e bb       	out	0x1e, r24	; 30
 23c:	e0 9a       	sbi	0x1c, 0	; 28
 23e:	99 27       	eor	r25, r25
 240:	8d b3       	in	r24, 0x1d	; 29
 242:	08 95       	ret

Disassembly of section .text.avrlibc:

00000202 <eeprom_write_byte>:
 202:	26 2f       	mov	r18, r22

00000204 <eeprom_write_r18>:
 204:	e1 99       	sbic	0x1c, 1	; 28
 206:	fe cf       	rjmp	.-4      	; 0x204 <eeprom_write_r18>
 208:	9f bb       	out	0x1f, r25	; 31
 20a:	8e bb       	out	0x1e, r24	; 30
 20c:	2d bb       	out	0x1d, r18	; 29
 20e:	0f b6       	in	r0, 0x3f	; 63
 210:	f8 94       	cli
 212:	e2 9a       	sbi	0x1c, 2	; 28
 214:	e1 9a       	sbi	0x1c, 1	; 28
 216:	0f be       	out	0x3f, r0	; 63
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	08 95       	ret
