
Task1_source_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000208  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000001c  00000000  00000000  00000237  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000253  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d1d  00000000  00000000  0000029b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e0  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ae  00000000  00000000  00001698  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00001a48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001be  00000000  00000000  00001aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000186  00000186  000001fa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001dcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.ServoMotor_Initialize 0000001c  00000154  00000154  000001c8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.ServoMotor_Rotate 00000040  000000f6  000000f6  0000016a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    0000004e  000000a8  000000a8  0000011c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.libgcc.mul 0000001e  00000136  00000136  000001aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.__dummy_fini 00000002  0000018e  0000018e  00000202  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.__dummy_funcs_on_exit 00000002  00000190  00000190  00000204  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.__dummy_simulator_exit 00000002  00000192  00000192  00000206  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.exit    00000016  00000170  00000170  000001e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text._Exit   00000004  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
   8:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
   c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  10:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  14:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  18:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  1c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  20:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  24:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  28:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  2c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  30:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  34:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  38:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  3c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  40:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  44:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  48:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  4c:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>
  50:	0c 94 c3 00 	jmp	0x186	; 0x186 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	e4 e5       	ldi	r30, 0x54	; 84
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	40 e0       	ldi	r20, 0x00	; 0
  66:	17 c0       	rjmp	.+46     	; 0x96 <__do_clear_bss+0x8>
  68:	b5 91       	lpm	r27, Z+
  6a:	a5 91       	lpm	r26, Z+
  6c:	35 91       	lpm	r19, Z+
  6e:	25 91       	lpm	r18, Z+
  70:	05 91       	lpm	r16, Z+
  72:	07 fd       	sbrc	r16, 7
  74:	0c c0       	rjmp	.+24     	; 0x8e <__do_clear_bss>
  76:	95 91       	lpm	r25, Z+
  78:	85 91       	lpm	r24, Z+
  7a:	ef 01       	movw	r28, r30
  7c:	f9 2f       	mov	r31, r25
  7e:	e8 2f       	mov	r30, r24
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 17       	cp	r26, r18
  86:	b3 07       	cpc	r27, r19
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0x20>
  8a:	fe 01       	movw	r30, r28
  8c:	04 c0       	rjmp	.+8      	; 0x96 <__do_clear_bss+0x8>

0000008e <__do_clear_bss>:
  8e:	1d 92       	st	X+, r1
  90:	a2 17       	cp	r26, r18
  92:	b3 07       	cpc	r27, r19
  94:	e1 f7       	brne	.-8      	; 0x8e <__do_clear_bss>
  96:	e4 35       	cpi	r30, 0x54	; 84
  98:	f4 07       	cpc	r31, r20
  9a:	31 f7       	brne	.-52     	; 0x68 <__do_copy_data+0x8>
  9c:	0e 94 54 00 	call	0xa8	; 0xa8 <_etext>
  a0:	0c 94 b8 00 	jmp	0x170	; 0x170 <exit>

000000a4 <_exit>:
  a4:	f8 94       	cli

000000a6 <__stop_program>:
  a6:	ff cf       	rjmp	.-2      	; 0xa6 <__stop_program>

Disassembly of section .text:

00000186 <__bad_interrupt>:
 186:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ServoMotor_Initialize:

00000154 <ServoMotor_Initialize>:

#include "Servo_Private.h"

void ServoMotor_Initialize(void)
{
	DDRD |= (1<<PD5);
 154:	81 b3       	in	r24, 0x11	; 17
 156:	80 62       	ori	r24, 0x20	; 32
 158:	81 bb       	out	0x11, r24	; 17
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/8 */
	TCCR1A = (1<<WGM11)|(1<<COM1A1);
 15a:	82 e8       	ldi	r24, 0x82	; 130
 15c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS11);
 15e:	8a e1       	ldi	r24, 0x1A	; 26
 160:	8e bd       	out	0x2e, r24	; 46
	TCNT1=0;
 162:	1d bc       	out	0x2d, r1	; 45
 164:	1c bc       	out	0x2c, r1	; 44
	ICR1 = 19999; //fPWM=50Hz (Period = 20ms Standard).
 166:	8f e1       	ldi	r24, 0x1F	; 31
 168:	9e e4       	ldi	r25, 0x4E	; 78
 16a:	97 bd       	out	0x27, r25	; 39
 16c:	86 bd       	out	0x26, r24	; 38
 16e:	08 95       	ret

Disassembly of section .text.ServoMotor_Rotate:

000000f6 <ServoMotor_Rotate>:
}

void ServoMotor_Rotate(servo_angle angle)
{
	OCR1A = (((ICR1*angle)/100)-1);
  f6:	46 b5       	in	r20, 0x26	; 38
  f8:	57 b5       	in	r21, 0x27	; 39
  fa:	28 2f       	mov	r18, r24
  fc:	24 9f       	mul	r18, r20
  fe:	c0 01       	movw	r24, r0
 100:	25 9f       	mul	r18, r21
 102:	90 0d       	add	r25, r0
 104:	11 24       	eor	r1, r1
 106:	9c 01       	movw	r18, r24
 108:	36 95       	lsr	r19
 10a:	27 95       	ror	r18
 10c:	36 95       	lsr	r19
 10e:	27 95       	ror	r18
 110:	ab e7       	ldi	r26, 0x7B	; 123
 112:	b4 e1       	ldi	r27, 0x14	; 20
 114:	0e 94 9b 00 	call	0x136	; 0x136 <__umulhisi3>
 118:	96 95       	lsr	r25
 11a:	87 95       	ror	r24
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	9b bd       	out	0x2b, r25	; 43
 120:	8a bd       	out	0x2a, r24	; 42
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	9d e3       	ldi	r25, 0x3D	; 61
 126:	29 e4       	ldi	r18, 0x49	; 73
 128:	81 50       	subi	r24, 0x01	; 1
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	20 40       	sbci	r18, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <ServoMotor_Rotate+0x32>
 130:	00 c0       	rjmp	.+0      	; 0x132 <ServoMotor_Rotate+0x3c>
 132:	00 00       	nop
 134:	08 95       	ret

Disassembly of section .text.main:

000000a8 <main>:
#include "main.h"

int main(void)
{	int x=0;
	servo_angle angle;
	ServoMotor_Initialize();
  a8:	0e 94 aa 00 	call	0x154	; 0x154 <ServoMotor_Initialize>
    while(1)
    {	x++;
		angle=angle_P90;
		
		ServoMotor_Rotate(angle);
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	0e 94 7b 00 	call	0xf6	; 0xf6 <ServoMotor_Rotate>
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	87 ea       	ldi	r24, 0xA7	; 167
  b6:	91 e6       	ldi	r25, 0x61	; 97
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <main+0x10>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x1a>
  c2:	00 00       	nop
		_delay_ms(2000);
		angle=angle_0;
		ServoMotor_Rotate(angle);
  c4:	85 e0       	ldi	r24, 0x05	; 5
  c6:	0e 94 7b 00 	call	0xf6	; 0xf6 <ServoMotor_Rotate>
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	87 ea       	ldi	r24, 0xA7	; 167
  ce:	91 e6       	ldi	r25, 0x61	; 97
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x28>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x32>
  da:	00 00       	nop
		_delay_ms(2000);
		angle=angle_N90;
		ServoMotor_Rotate(angle);
  dc:	8a e0       	ldi	r24, 0x0A	; 10
  de:	0e 94 7b 00 	call	0xf6	; 0xf6 <ServoMotor_Rotate>
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	87 ea       	ldi	r24, 0xA7	; 167
  e6:	91 e6       	ldi	r25, 0x61	; 97
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x40>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x4a>
  f2:	00 00       	nop
  f4:	db cf       	rjmp	.-74     	; 0xac <main+0x4>

Disassembly of section .text.libgcc.mul:

00000136 <__umulhisi3>:
 136:	a2 9f       	mul	r26, r18
 138:	b0 01       	movw	r22, r0
 13a:	b3 9f       	mul	r27, r19
 13c:	c0 01       	movw	r24, r0
 13e:	a3 9f       	mul	r26, r19
 140:	70 0d       	add	r23, r0
 142:	81 1d       	adc	r24, r1
 144:	11 24       	eor	r1, r1
 146:	91 1d       	adc	r25, r1
 148:	b2 9f       	mul	r27, r18
 14a:	70 0d       	add	r23, r0
 14c:	81 1d       	adc	r24, r1
 14e:	11 24       	eor	r1, r1
 150:	91 1d       	adc	r25, r1
 152:	08 95       	ret

Disassembly of section .text.__dummy_fini:

0000018e <_fini>:
 18e:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000190 <__funcs_on_exit>:
 190:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000192 <__simulator_exit>:
 192:	08 95       	ret

Disassembly of section .text.exit:

00000170 <exit>:
 170:	ec 01       	movw	r28, r24
 172:	0e 94 c8 00 	call	0x190	; 0x190 <__funcs_on_exit>
 176:	0e 94 c7 00 	call	0x18e	; 0x18e <_fini>
 17a:	ce 01       	movw	r24, r28
 17c:	0e 94 c9 00 	call	0x192	; 0x192 <__simulator_exit>
 180:	ce 01       	movw	r24, r28
 182:	0e 94 c5 00 	call	0x18a	; 0x18a <_Exit>

Disassembly of section .text._Exit:

0000018a <_Exit>:
 18a:	0e 94 52 00 	call	0xa4	; 0xa4 <_exit>
