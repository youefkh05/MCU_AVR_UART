
Task1_source_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c4  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000c4  000002d8  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  00000d2f  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 00000134  00000000  00000000  00000d5e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000258  00000000  00000000  00000e98  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000038cd  00000000  00000000  000010f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ccd  00000000  00000000  000049bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016f1  00000000  00000000  0000568a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000408  00000000  00000000  00006d7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  00007184  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001445  00000000  00000000  000074d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  0000891e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  00000c2c  00000c2c  00000d20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00008a98  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Initialize_E2PROM_State 00000016  00000b4a  00000b4a  00000c3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Read_E2PROM_State 0000000c  00000bd0  00000bd0  00000cc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.check_State 00000076  000006b8  000006b8  000007ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.handle_State 000000b0  0000047c  0000047c  00000570  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.handle_event 0000002c  00000a58  00000a58  00000b4c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.UART_Transmit_State 00000028  00000a84  00000a84  00000b78  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .data.EEPROM_State_Add 00000001  00800060  00000c3a  00000d2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 21 .text.Initialize_TEMP_SENSOR 0000000c  00000bdc  00000bdc  00000cd0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.Read_TEMP_SENSOR 00000030  000009fa  000009fa  00000aee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.DC_Initialize 00000050  00000858  00000858  0000094c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.DC_Start 00000090  0000052c  0000052c  00000620  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.DC_Stop 0000004a  000008a8  000008a8  0000099c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.DC_Change_Speed 00000024  00000aac  00000aac  00000ba0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.main    00000082  000005bc  000005bc  000006b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_1 00000038  000009c2  000009c2  00000ab6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .bss.buttonPressed 00000001  00800061  00800061  00000d2f  2**0
                  ALLOC
 30 .bss.currentState 00000001  00800062  00800062  00000d2f  2**0
                  ALLOC
 31 .text.ADC_Initialize 0000000e  00000b98  00000b98  00000c8c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.ADC_Read 00000074  0000072e  0000072e  00000822  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.DIO_SetPinDirection 000000e2  000001e4  000001e4  000002d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.DIO_SetPinValue 000000e2  000002c6  000002c6  000003ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.External_Interrupt0_Initalize 00000058  00000800  00000800  000008f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.UART_Initialize_WithoutInterrupt 00000120  000000c4  000000c4  000001b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.UART_Transmit_Character 0000000a  00000c00  00000c00  00000cf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.UART_Transmit_Word 0000001c  00000b14  00000b14  00000c08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text         0000000a  00000c0a  00000c0a  00000cfe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text         0000005e  000007a2  000007a2  00000896  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text         0000007a  0000063e  0000063e  00000732  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text         00000048  000008f2  000008f2  000009e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text         00000044  0000093a  0000093a  00000a2e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text         0000000e  00000ba6  00000ba6  00000c9a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text         0000000a  00000c14  00000c14  00000d08  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text         00000008  00000c1e  00000c1e  00000d12  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text         000000d4  000003a8  000003a8  0000049c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text         0000000c  00000be8  00000be8  00000cdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text         00000006  00000c26  00000c26  00000d1a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text         0000000e  00000bb4  00000bb4  00000ca8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text         0000000e  00000bc2  00000bc2  00000cb6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text         00000022  00000ad0  00000ad0  00000bc4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.libgcc.div 00000044  0000097e  0000097e  00000a72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.libgcc.div 0000002e  00000a2a  00000a2a  00000b1e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.libgcc.div 00000010  00000b88  00000b88  00000c7c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.libgcc  0000000c  00000bf4  00000bf4  00000ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.__dummy_fini 00000002  00000c34  00000c34  00000d28  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.__dummy_funcs_on_exit 00000002  00000c36  00000c36  00000d2a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.__dummy_simulator_exit 00000002  00000c38  00000c38  00000d2c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.exit    00000016  00000b60  00000b60  00000c54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text._Exit   00000004  00000c30  00000c30  00000d24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.avrlibc 00000012  00000b76  00000b76  00000c6a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.avrlibc 00000022  00000af2  00000af2  00000be6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.avrlibc 0000001a  00000b30  00000b30  00000c24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__vector_1>
   8:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
   c:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  10:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  14:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  18:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  1c:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  20:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  24:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  28:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  2c:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  30:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  34:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  38:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  3c:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  40:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  44:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  48:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  4c:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  50:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__bad_interrupt>
  54:	a4 03       	fmuls	r18, r20
  56:	a8 03       	fmulsu	r18, r16
  58:	ad 03       	fmulsu	r18, r21
  5a:	b2 03       	fmuls	r19, r18
  5c:	b7 03       	fmuls	r19, r23
  5e:	bc 03       	fmulsu	r19, r20
  60:	c1 03       	fmuls	r20, r17
  62:	c6 03       	fmuls	r20, r22

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	00 61       	ori	r16, 0x10	; 16
  68:	00 0c       	add	r0, r0
  6a:	3a 00       	.word	0x003a	; ????
  6c:	61 00       	.word	0x0061	; ????
  6e:	63 80       	ldd	r6, Z+3	; 0x03

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf e5       	ldi	r28, 0x5F	; 95
  76:	d8 e0       	ldi	r29, 0x08	; 8
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	e4 e6       	ldi	r30, 0x64	; 100
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	17 c0       	rjmp	.+46     	; 0xb2 <__do_clear_bss+0x8>
  84:	b5 91       	lpm	r27, Z+
  86:	a5 91       	lpm	r26, Z+
  88:	35 91       	lpm	r19, Z+
  8a:	25 91       	lpm	r18, Z+
  8c:	05 91       	lpm	r16, Z+
  8e:	07 fd       	sbrc	r16, 7
  90:	0c c0       	rjmp	.+24     	; 0xaa <__do_clear_bss>
  92:	95 91       	lpm	r25, Z+
  94:	85 91       	lpm	r24, Z+
  96:	ef 01       	movw	r28, r30
  98:	f9 2f       	mov	r31, r25
  9a:	e8 2f       	mov	r30, r24
  9c:	05 90       	lpm	r0, Z+
  9e:	0d 92       	st	X+, r0
  a0:	a2 17       	cp	r26, r18
  a2:	b3 07       	cpc	r27, r19
  a4:	d9 f7       	brne	.-10     	; 0x9c <__do_copy_data+0x20>
  a6:	fe 01       	movw	r30, r28
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <__do_clear_bss+0x8>

000000aa <__do_clear_bss>:
  aa:	1d 92       	st	X+, r1
  ac:	a2 17       	cp	r26, r18
  ae:	b3 07       	cpc	r27, r19
  b0:	e1 f7       	brne	.-8      	; 0xaa <__do_clear_bss>
  b2:	e0 37       	cpi	r30, 0x70	; 112
  b4:	f4 07       	cpc	r31, r20
  b6:	31 f7       	brne	.-52     	; 0x84 <__do_copy_data+0x8>
  b8:	0e 94 de 02 	call	0x5bc	; 0x5bc <main>
  bc:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <exit>

000000c0 <_exit>:
  c0:	f8 94       	cli

000000c2 <__stop_program>:
  c2:	ff cf       	rjmp	.-2      	; 0xc2 <__stop_program>

Disassembly of section .text:

00000c2c <__bad_interrupt>:
 c2c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Initialize_E2PROM_State:

00000b4a <Initialize_E2PROM_State>:
uint8_t EEPROM_State_Add=0b01000000;	//any place

void Initialize_E2PROM_State(void){
	
	/* It should have a normal state first	*/
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
 b4a:	60 e0       	ldi	r22, 0x00	; 0
 b4c:	80 e6       	ldi	r24, 0x60	; 96
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	0e 94 79 05 	call	0xaf2	; 0xaf2 <eeprom_update_byte>
	eeprom_update_byte (&EEPROM_State_Add, (uint8_t)Normal_state);	
 b54:	60 e0       	ldi	r22, 0x00	; 0
 b56:	80 e6       	ldi	r24, 0x60	; 96
 b58:	90 e0       	ldi	r25, 0x00	; 0
 b5a:	0e 94 79 05 	call	0xaf2	; 0xaf2 <eeprom_update_byte>
 b5e:	08 95       	ret

Disassembly of section .text.Read_E2PROM_State:

00000bd0 <Read_E2PROM_State>:
}

uint8_t Read_E2PROM_State (void){
	
	/*	read the state	*/
	uint8_t x= eeprom_read_byte (&EEPROM_State_Add); 		
 bd0:	60 e6       	ldi	r22, 0x60	; 96
 bd2:	70 e0       	ldi	r23, 0x00	; 0
 bd4:	80 e8       	ldi	r24, 0x80	; 128
 bd6:	0e 94 bb 05 	call	0xb76	; 0xb76 <eeprom_read_byte>
	return x;
}
 bda:	08 95       	ret

Disassembly of section .text.check_State:

000006b8 <check_State>:
	/*	check the state	*/
	check_State(T,S);
	handle_State(T,DC_fan,S);
}

void check_State(temp T,E2PROM_State* S){
 6b8:	cf 92       	push	r12
 6ba:	df 92       	push	r13
 6bc:	ef 92       	push	r14
 6be:	ff 92       	push	r15
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	eb 01       	movw	r28, r22
	
	/*	check if the state is changed	*/
	if(T<50.0 && *S!=Normal_state){
 6c6:	bc 01       	movw	r22, r24
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
 6cc:	0e 94 1f 03 	call	0x63e	; 0x63e <__floatunsisf>
 6d0:	6b 01       	movw	r12, r22
 6d2:	7c 01       	movw	r14, r24
 6d4:	20 e0       	ldi	r18, 0x00	; 0
 6d6:	30 e0       	ldi	r19, 0x00	; 0
 6d8:	48 e4       	ldi	r20, 0x48	; 72
 6da:	52 e4       	ldi	r21, 0x42	; 66
 6dc:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 6e0:	88 23       	and	r24, r24
 6e2:	54 f4       	brge	.+20     	; 0x6f8 <check_State+0x40>
 6e4:	88 81       	ld	r24, Y
 6e6:	88 23       	and	r24, r24
 6e8:	39 f0       	breq	.+14     	; 0x6f8 <check_State+0x40>
		*S=Normal_state;
 6ea:	18 82       	st	Y, r1
		eeprom_write_byte (&EEPROM_State_Add, *S);
 6ec:	60 e0       	ldi	r22, 0x00	; 0
 6ee:	80 e6       	ldi	r24, 0x60	; 96
 6f0:	90 e0       	ldi	r25, 0x00	; 0
 6f2:	0e 94 98 05 	call	0xb30	; 0xb30 <eeprom_write_byte>
 6f6:	14 c0       	rjmp	.+40     	; 0x720 <check_State+0x68>
		//stop timer
	}
	else if(T>=50.0 && *S!=Emergency_state){
 6f8:	20 e0       	ldi	r18, 0x00	; 0
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	48 e4       	ldi	r20, 0x48	; 72
 6fe:	52 e4       	ldi	r21, 0x42	; 66
 700:	c7 01       	movw	r24, r14
 702:	b6 01       	movw	r22, r12
 704:	0e 94 0a 06 	call	0xc14	; 0xc14 <__gesf2>
 708:	88 23       	and	r24, r24
 70a:	54 f0       	brlt	.+20     	; 0x720 <check_State+0x68>
 70c:	88 81       	ld	r24, Y
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	39 f0       	breq	.+14     	; 0x720 <check_State+0x68>
		*S=Emergency_state;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	88 83       	st	Y, r24
		eeprom_write_byte (&EEPROM_State_Add, *S);
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	80 e6       	ldi	r24, 0x60	; 96
 71a:	90 e0       	ldi	r25, 0x00	; 0
 71c:	0e 94 98 05 	call	0xb30	; 0xb30 <eeprom_write_byte>
		//start timer
	}
	
}
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	ff 90       	pop	r15
 726:	ef 90       	pop	r14
 728:	df 90       	pop	r13
 72a:	cf 90       	pop	r12
 72c:	08 95       	ret

Disassembly of section .text.handle_State:

0000047c <handle_State>:
}

void Write_E2PROM_State( E2PROM_State state){
	
	/*	write the state	*/
	eeprom_write_byte (&EEPROM_State_Add, (uint8_t)state); 
 47c:	cf 92       	push	r12
 47e:	df 92       	push	r13
 480:	ef 92       	push	r14
 482:	ff 92       	push	r15
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	ec 01       	movw	r28, r24
 48c:	fa 01       	movw	r30, r20
 48e:	90 81       	ld	r25, Z
 490:	91 11       	cpse	r25, r1
 492:	44 c0       	rjmp	.+136    	; 0x51c <handle_State+0xa0>
 494:	16 2f       	mov	r17, r22
 496:	be 01       	movw	r22, r28
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	0e 94 1f 03 	call	0x63e	; 0x63e <__floatunsisf>
 4a0:	6b 01       	movw	r12, r22
 4a2:	7c 01       	movw	r14, r24
 4a4:	20 e0       	ldi	r18, 0x00	; 0
 4a6:	30 e0       	ldi	r19, 0x00	; 0
 4a8:	40 ea       	ldi	r20, 0xA0	; 160
 4aa:	51 e4       	ldi	r21, 0x41	; 65
 4ac:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 4b0:	18 16       	cp	r1, r24
 4b2:	2c f0       	brlt	.+10     	; 0x4be <handle_State+0x42>
 4b4:	f8 94       	cli
 4b6:	81 2f       	mov	r24, r17
 4b8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <DC_Stop>
 4bc:	2f c0       	rjmp	.+94     	; 0x51c <handle_State+0xa0>
 4be:	20 e0       	ldi	r18, 0x00	; 0
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	40 ea       	ldi	r20, 0xA0	; 160
 4c4:	51 e4       	ldi	r21, 0x41	; 65
 4c6:	c7 01       	movw	r24, r14
 4c8:	b6 01       	movw	r22, r12
 4ca:	0e 94 0a 06 	call	0xc14	; 0xc14 <__gesf2>
 4ce:	18 16       	cp	r1, r24
 4d0:	c4 f4       	brge	.+48     	; 0x502 <handle_State+0x86>
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	40 e2       	ldi	r20, 0x20	; 32
 4d8:	52 e4       	ldi	r21, 0x42	; 66
 4da:	c7 01       	movw	r24, r14
 4dc:	b6 01       	movw	r22, r12
 4de:	0e 94 05 06 	call	0xc0a	; 0xc0a <__cmpsf2>
 4e2:	18 16       	cp	r1, r24
 4e4:	74 f0       	brlt	.+28     	; 0x502 <handle_State+0x86>
 4e6:	f8 94       	cli
 4e8:	60 e0       	ldi	r22, 0x00	; 0
 4ea:	81 2f       	mov	r24, r17
 4ec:	0e 94 96 02 	call	0x52c	; 0x52c <DC_Start>
 4f0:	be 01       	movw	r22, r28
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	66 0f       	add	r22, r22
 4f8:	77 1f       	adc	r23, r23
 4fa:	81 2f       	mov	r24, r17
 4fc:	0e 94 56 05 	call	0xaac	; 0xaac <DC_Change_Speed>
 500:	0d c0       	rjmp	.+26     	; 0x51c <handle_State+0xa0>
 502:	a9 97       	sbiw	r28, 0x29	; 41
 504:	2a 97       	sbiw	r28, 0x0a	; 10
 506:	50 f4       	brcc	.+20     	; 0x51c <handle_State+0xa0>
 508:	78 94       	sei
 50a:	60 e0       	ldi	r22, 0x00	; 0
 50c:	81 2f       	mov	r24, r17
 50e:	0e 94 96 02 	call	0x52c	; 0x52c <DC_Start>
 512:	60 ea       	ldi	r22, 0xA0	; 160
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	81 2f       	mov	r24, r17
 518:	0e 94 56 05 	call	0xaac	; 0xaac <DC_Change_Speed>
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	ff 90       	pop	r15
 524:	ef 90       	pop	r14
 526:	df 90       	pop	r13
 528:	cf 90       	pop	r12
 52a:	08 95       	ret

Disassembly of section .text.handle_event:

00000a58 <handle_event>:
}


void handle_event(temp T,dc_motor DC_fan, E2PROM_State* S){
 a58:	ff 92       	push	r15
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	ec 01       	movw	r28, r24
 a64:	f6 2e       	mov	r15, r22
 a66:	8a 01       	movw	r16, r20
	
	/*	check the state	*/
	check_State(T,S);
 a68:	ba 01       	movw	r22, r20
 a6a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <check_State>
	handle_State(T,DC_fan,S);
 a6e:	a8 01       	movw	r20, r16
 a70:	6f 2d       	mov	r22, r15
 a72:	ce 01       	movw	r24, r28
 a74:	0e 94 3e 02 	call	0x47c	; 0x47c <handle_State>
}
 a78:	df 91       	pop	r29
 a7a:	cf 91       	pop	r28
 a7c:	1f 91       	pop	r17
 a7e:	0f 91       	pop	r16
 a80:	ff 90       	pop	r15
 a82:	08 95       	ret

Disassembly of section .text.UART_Transmit_State:

00000a84 <UART_Transmit_State>:
	}
	//stop fan	
}

void UART_Transmit_State(const temp T,uint8_t *bot1f){
	if (T>40 && T<=50 && *bot1f==1)
 a84:	9c 01       	movw	r18, r24
 a86:	29 52       	subi	r18, 0x29	; 41
 a88:	31 09       	sbc	r19, r1
 a8a:	2a 30       	cpi	r18, 0x0A	; 10
 a8c:	31 05       	cpc	r19, r1
 a8e:	48 f4       	brcc	.+18     	; 0xaa2 <UART_Transmit_State+0x1e>
 a90:	fb 01       	movw	r30, r22
 a92:	20 81       	ld	r18, Z
 a94:	21 30       	cpi	r18, 0x01	; 1
 a96:	29 f4       	brne	.+10     	; 0xaa2 <UART_Transmit_State+0x1e>
	{	
		//send the off signal
		uart_status x=UART_Transmit_Word(Off_Mes);
 a98:	8f ef       	ldi	r24, 0xFF	; 255
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 8a 05 	call	0xb14	; 0xb14 <UART_Transmit_Word>
	//stop fan	
}

void UART_Transmit_State(const temp T,uint8_t *bot1f){
	if (T>40 && T<=50 && *bot1f==1)
	{	
 aa0:	08 95       	ret
		//send the off signal
		uart_status x=UART_Transmit_Word(Off_Mes);
	}
	else{
		/* Reset the flag	*/
		*bot1f=0;
 aa2:	fb 01       	movw	r30, r22
 aa4:	10 82       	st	Z, r1
		uart_status x=UART_Transmit_Word(T);
 aa6:	0e 94 8a 05 	call	0xb14	; 0xb14 <UART_Transmit_Word>
 aaa:	08 95       	ret

Disassembly of section .text.Initialize_TEMP_SENSOR:

00000bdc <Initialize_TEMP_SENSOR>:

#include "LM35_TMP_Sensor_Private.h"

void Initialize_TEMP_SENSOR(void)
{
	DIO_SetPinDirection(TEMP_SEN_PORT, TEMP_SEN_PIN, DIO_OUTPUT);
 bdc:	41 e0       	ldi	r20, 0x01	; 1
 bde:	60 e0       	ldi	r22, 0x00	; 0
 be0:	80 e0       	ldi	r24, 0x00	; 0
 be2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_SetPinDirection>
 be6:	08 95       	ret

Disassembly of section .text.Read_TEMP_SENSOR:

000009fa <Read_TEMP_SENSOR>:
}

temp Read_TEMP_SENSOR(void){
	uint16_t temp_volt=ADC_Read(TEMP_SEN_PIN);
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	0e 94 97 03 	call	0x72e	; 0x72e <ADC_Read>
	temp temp_read = temp_volt*500.0/1024.0 ;
 a00:	bc 01       	movw	r22, r24
 a02:	80 e0       	ldi	r24, 0x00	; 0
 a04:	90 e0       	ldi	r25, 0x00	; 0
 a06:	0e 94 1f 03 	call	0x63e	; 0x63e <__floatunsisf>
 a0a:	20 e0       	ldi	r18, 0x00	; 0
 a0c:	30 e0       	ldi	r19, 0x00	; 0
 a0e:	4a ef       	ldi	r20, 0xFA	; 250
 a10:	53 e4       	ldi	r21, 0x43	; 67
 a12:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3>
 a16:	20 e0       	ldi	r18, 0x00	; 0
 a18:	30 e0       	ldi	r19, 0x00	; 0
 a1a:	40 e8       	ldi	r20, 0x80	; 128
 a1c:	5a e3       	ldi	r21, 0x3A	; 58
 a1e:	0e 94 0f 06 	call	0xc1e	; 0xc1e <__mulsf3>
 a22:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <__fixunssfsi>
	return temp_read;
 a26:	cb 01       	movw	r24, r22
 a28:	08 95       	ret

Disassembly of section .text.DC_Initialize:

00000858 <DC_Initialize>:

#include "DC_Private.h"

void DC_Initialize(dc_motor motor)
{	
	switch(motor)
 858:	88 23       	and	r24, r24
 85a:	19 f0       	breq	.+6      	; 0x862 <__stack+0x3>
 85c:	81 30       	cpi	r24, 0x01	; 1
 85e:	a1 f0       	breq	.+40     	; 0x888 <__stack+0x29>
 860:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable1_Pin, DC_OUTPUT);
 862:	41 e0       	ldi	r20, 0x01	; 1
 864:	63 e0       	ldi	r22, 0x03	; 3
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A1, DC_OUTPUT);
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	61 e0       	ldi	r22, 0x01	; 1
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A2, DC_OUTPUT);
 876:	41 e0       	ldi	r20, 0x01	; 1
 878:	62 e0       	ldi	r22, 0x02	; 2
 87a:	82 e0       	ldi	r24, 0x02	; 2
 87c:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_SetPinDirection>
		TCNT0 = 0;			/* Set timer0 count zero */
 880:	12 be       	out	0x32, r1	; 50
		TCCR0 = (1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00)|(1<<CS01);/* Set Fast PWM with Fosc/64 Timer0 clock */
 882:	8b e6       	ldi	r24, 0x6B	; 107
 884:	83 bf       	out	0x33, r24	; 51
		break;
 886:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable2_Pin, DC_OUTPUT);
 888:	41 e0       	ldi	r20, 0x01	; 1
 88a:	62 e0       	ldi	r22, 0x02	; 2
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A3, DC_OUTPUT);
 892:	41 e0       	ldi	r20, 0x01	; 1
 894:	62 e0       	ldi	r22, 0x02	; 2
 896:	82 e0       	ldi	r24, 0x02	; 2
 898:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_SetPinDirection>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A4, DC_OUTPUT);
 89c:	41 e0       	ldi	r20, 0x01	; 1
 89e:	62 e0       	ldi	r22, 0x02	; 2
 8a0:	82 e0       	ldi	r24, 0x02	; 2
 8a2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_SetPinDirection>
 8a6:	08 95       	ret

Disassembly of section .text.DC_Start:

0000052c <DC_Start>:
	}
	
}

void DC_Start(dc_motor motor, dc_motor_direction direction)
{	
 52c:	cf 93       	push	r28
 52e:	c6 2f       	mov	r28, r22
	switch(motor)
 530:	88 23       	and	r24, r24
 532:	19 f0       	breq	.+6      	; 0x53a <DC_Start+0xe>
 534:	81 30       	cpi	r24, 0x01	; 1
 536:	09 f1       	breq	.+66     	; 0x57a <DC_Start+0x4e>
 538:	3f c0       	rjmp	.+126    	; 0x5b8 <DC_Start+0x8c>
	{
		case DC_Motor1:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_HIGH);
 53a:	41 e0       	ldi	r20, 0x01	; 1
 53c:	63 e0       	ldi	r22, 0x03	; 3
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
		switch(direction)
 544:	cc 23       	and	r28, r28
 546:	19 f0       	breq	.+6      	; 0x54e <DC_Start+0x22>
 548:	c1 30       	cpi	r28, 0x01	; 1
 54a:	61 f0       	breq	.+24     	; 0x564 <DC_Start+0x38>
 54c:	35 c0       	rjmp	.+106    	; 0x5b8 <DC_Start+0x8c>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_HIGH);
 54e:	41 e0       	ldi	r20, 0x01	; 1
 550:	61 e0       	ldi	r22, 0x01	; 1
 552:	82 e0       	ldi	r24, 0x02	; 2
 554:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
 558:	40 e0       	ldi	r20, 0x00	; 0
 55a:	62 e0       	ldi	r22, 0x02	; 2
 55c:	82 e0       	ldi	r24, 0x02	; 2
 55e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
			break;
 562:	2a c0       	rjmp	.+84     	; 0x5b8 <DC_Start+0x8c>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	82 e0       	ldi	r24, 0x02	; 2
 56a:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_HIGH);
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	62 e0       	ldi	r22, 0x02	; 2
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
			break;
 578:	1f c0       	rjmp	.+62     	; 0x5b8 <DC_Start+0x8c>
		}
		break;
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_HIGH);
 57a:	41 e0       	ldi	r20, 0x01	; 1
 57c:	62 e0       	ldi	r22, 0x02	; 2
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
		switch(direction)
 584:	cc 23       	and	r28, r28
 586:	19 f0       	breq	.+6      	; 0x58e <DC_Start+0x62>
 588:	c1 30       	cpi	r28, 0x01	; 1
 58a:	61 f0       	breq	.+24     	; 0x5a4 <DC_Start+0x78>
 58c:	15 c0       	rjmp	.+42     	; 0x5b8 <DC_Start+0x8c>
		{
			case DC_CW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_HIGH);
 58e:	41 e0       	ldi	r20, 0x01	; 1
 590:	62 e0       	ldi	r22, 0x02	; 2
 592:	82 e0       	ldi	r24, 0x02	; 2
 594:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
 598:	40 e0       	ldi	r20, 0x00	; 0
 59a:	62 e0       	ldi	r22, 0x02	; 2
 59c:	82 e0       	ldi	r24, 0x02	; 2
 59e:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
			break;
 5a2:	0a c0       	rjmp	.+20     	; 0x5b8 <DC_Start+0x8c>
			case DC_CCW:
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
 5a4:	40 e0       	ldi	r20, 0x00	; 0
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	82 e0       	ldi	r24, 0x02	; 2
 5aa:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
			DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_HIGH);
 5ae:	41 e0       	ldi	r20, 0x01	; 1
 5b0:	62 e0       	ldi	r22, 0x02	; 2
 5b2:	82 e0       	ldi	r24, 0x02	; 2
 5b4:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
			break;
		}
		break;
	}
}
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

Disassembly of section .text.DC_Stop:

000008a8 <DC_Stop>:

void DC_Stop(dc_motor motor)
{
	switch(motor)
 8a8:	88 23       	and	r24, r24
 8aa:	19 f0       	breq	.+6      	; 0x8b2 <DC_Stop+0xa>
 8ac:	81 30       	cpi	r24, 0x01	; 1
 8ae:	89 f0       	breq	.+34     	; 0x8d2 <DC_Stop+0x2a>
 8b0:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable1_Pin, DC_LOW);
 8b2:	40 e0       	ldi	r20, 0x00	; 0
 8b4:	63 e0       	ldi	r22, 0x03	; 3
 8b6:	81 e0       	ldi	r24, 0x01	; 1
 8b8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A1, DC_LOW);
 8bc:	40 e0       	ldi	r20, 0x00	; 0
 8be:	61 e0       	ldi	r22, 0x01	; 1
 8c0:	82 e0       	ldi	r24, 0x02	; 2
 8c2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor1_A2, DC_LOW);
 8c6:	40 e0       	ldi	r20, 0x00	; 0
 8c8:	62 e0       	ldi	r22, 0x02	; 2
 8ca:	82 e0       	ldi	r24, 0x02	; 2
 8cc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
		break;
 8d0:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinValue(DC_Enable_Port, DC_Enable2_Pin, DC_LOW);
 8d2:	40 e0       	ldi	r20, 0x00	; 0
 8d4:	62 e0       	ldi	r22, 0x02	; 2
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A3, DC_LOW);
 8dc:	40 e0       	ldi	r20, 0x00	; 0
 8de:	62 e0       	ldi	r22, 0x02	; 2
 8e0:	82 e0       	ldi	r24, 0x02	; 2
 8e2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
		DIO_SetPinValue(DC_Motor_Port, DC_Motor2_A4, DC_LOW);
 8e6:	40 e0       	ldi	r20, 0x00	; 0
 8e8:	62 e0       	ldi	r22, 0x02	; 2
 8ea:	82 e0       	ldi	r24, 0x02	; 2
 8ec:	0e 94 63 01 	call	0x2c6	; 0x2c6 <DIO_SetPinValue>
 8f0:	08 95       	ret

Disassembly of section .text.DC_Change_Speed:

00000aac <DC_Change_Speed>:
		break;
	}
}

void DC_Change_Speed(dc_motor motor,uint16_t speed)
{	switch (motor){
 aac:	88 23       	and	r24, r24
 aae:	19 f0       	breq	.+6      	; 0xab6 <DC_Change_Speed+0xa>
 ab0:	81 30       	cpi	r24, 0x01	; 1
 ab2:	39 f0       	breq	.+14     	; 0xac2 <DC_Change_Speed+0x16>
 ab4:	08 95       	ret
		case DC_Motor1:
			OCR0 = speed/4;
 ab6:	76 95       	lsr	r23
 ab8:	67 95       	ror	r22
 aba:	76 95       	lsr	r23
 abc:	67 95       	ror	r22
 abe:	6c bf       	out	0x3c, r22	; 60
		break;
 ac0:	08 95       	ret
		case DC_Motor2:
			OCR1A = speed/4;
 ac2:	76 95       	lsr	r23
 ac4:	67 95       	ror	r22
 ac6:	76 95       	lsr	r23
 ac8:	67 95       	ror	r22
 aca:	7b bd       	out	0x2b, r23	; 43
 acc:	6a bd       	out	0x2a, r22	; 42
 ace:	08 95       	ret

Disassembly of section .text.main:

000005bc <main>:
volatile E2PROM_State currentState =Normal_state;
volatile uint8_t buttonPressed = 0;


int main(void)
{	
 5bc:	0f 93       	push	r16
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
	/*		Initializations		*/
	temp temperature=0;
	dc_motor DC_fan1=DC_Motor1;
	DC_Initialize(DC_fan1);
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	0e 94 2c 04 	call	0x858	; 0x858 <DC_Initialize>
	Initialize_E2PROM_State();
 5c8:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Initialize_E2PROM_State>
	Initialize_TEMP_SENSOR();
 5cc:	0e 94 ee 05 	call	0xbdc	; 0xbdc <Initialize_TEMP_SENSOR>
	ADC_Initialize(5,1024);
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	85 e0       	ldi	r24, 0x05	; 5
 5d4:	0e 94 cc 05 	call	0xb98	; 0xb98 <ADC_Initialize>
	DIO_SetPinDirection(BOT1_PORT,BOT1_PIN,DIO_INPUT); //push button 
 5d8:	82 b3       	in	r24, 0x12	; 18
 5da:	40 e0       	ldi	r20, 0x00	; 0
 5dc:	62 e0       	ldi	r22, 0x02	; 2
 5de:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DIO_SetPinDirection>
	uart_status UART_State= UART_Initialize_WithoutInterrupt(UART_9600,Synchronous, Disable , Bits_8, Bit_1);
 5e2:	00 e0       	ldi	r16, 0x00	; 0
 5e4:	23 e0       	ldi	r18, 0x03	; 3
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	80 e6       	ldi	r24, 0x60	; 96
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 62 00 	call	0xc4	; 0xc4 <__data_load_end>
	if(UART_State==UART_NOK){
 5f2:	88 23       	and	r24, r24
 5f4:	f1 f0       	breq	.+60     	; 0x632 <main+0x76>
		return 0;
	}
	
	External_Interrupt0_Initalize(INT0_RISING);
 5f6:	82 e0       	ldi	r24, 0x02	; 2
 5f8:	0e 94 00 04 	call	0x800	; 0x800 <__DATA_REGION_LENGTH__>
	/*
	Timer_Init();
	*/
	
	// Read initial state from EEPROM
	uint8_t x= Read_E2PROM_State();
 5fc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <Read_E2PROM_State>
	if (x==0)
 600:	81 11       	cpse	r24, r1
 602:	03 c0       	rjmp	.+6      	; 0x60a <main+0x4e>
	{
		DC_Start(DC_fan1,DC_CW);
 604:	60 e0       	ldi	r22, 0x00	; 0
 606:	0e 94 96 02 	call	0x52c	; 0x52c <DC_Start>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 60a:	8f e3       	ldi	r24, 0x3F	; 63
 60c:	9c e9       	ldi	r25, 0x9C	; 156
 60e:	01 97       	sbiw	r24, 0x01	; 1
 610:	f1 f7       	brne	.-4      	; 0x60e <main+0x52>
 612:	00 c0       	rjmp	.+0      	; 0x614 <main+0x58>
 614:	00 00       	nop
	_delay_ms(10);

	/*	Main	Code	*/
    while(1)
    {	
		temperature=Read_TEMP_SENSOR();
 616:	0e 94 fd 04 	call	0x9fa	; 0x9fa <Read_TEMP_SENSOR>
 61a:	ec 01       	movw	r28, r24
		UART_Transmit_State(temperature,&buttonPressed);
 61c:	61 e6       	ldi	r22, 0x61	; 97
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	0e 94 42 05 	call	0xa84	; 0xa84 <UART_Transmit_State>
		handle_event(temperature,DC_fan1,&currentState);
 624:	42 e6       	ldi	r20, 0x62	; 98
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	60 e0       	ldi	r22, 0x00	; 0
 62a:	ce 01       	movw	r24, r28
 62c:	0e 94 2c 05 	call	0xa58	; 0xa58 <handle_event>
 630:	f2 cf       	rjmp	.-28     	; 0x616 <main+0x5a>
    }
}
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	df 91       	pop	r29
 638:	cf 91       	pop	r28
 63a:	0f 91       	pop	r16
 63c:	08 95       	ret

Disassembly of section .text.__vector_1:

000009c2 <__vector_1>:

/*	Interrupt Service Routine for INT0 (bot1)	 */
ISR(INT0_vect)
{
 9c2:	1f 92       	push	r1
 9c4:	0f 92       	push	r0
 9c6:	0f b6       	in	r0, 0x3f	; 63
 9c8:	0f 92       	push	r0
 9ca:	11 24       	eor	r1, r1
 9cc:	2f 93       	push	r18
 9ce:	8f 93       	push	r24
 9d0:	9f 93       	push	r25
	 buttonPressed = 1;		/* Set the flag */
 9d2:	81 e0       	ldi	r24, 0x01	; 1
 9d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <buttonPressed>
 9d8:	2f ef       	ldi	r18, 0xFF	; 255
 9da:	80 e7       	ldi	r24, 0x70	; 112
 9dc:	92 e0       	ldi	r25, 0x02	; 2
 9de:	21 50       	subi	r18, 0x01	; 1
 9e0:	80 40       	sbci	r24, 0x00	; 0
 9e2:	90 40       	sbci	r25, 0x00	; 0
 9e4:	e1 f7       	brne	.-8      	; 0x9de <__vector_1+0x1c>
 9e6:	00 c0       	rjmp	.+0      	; 0x9e8 <__vector_1+0x26>
 9e8:	00 00       	nop
	_delay_ms(50);  	/* Software debouncing control delay */
 9ea:	9f 91       	pop	r25
 9ec:	8f 91       	pop	r24
 9ee:	2f 91       	pop	r18
 9f0:	0f 90       	pop	r0
 9f2:	0f be       	out	0x3f, r0	; 63
 9f4:	0f 90       	pop	r0
 9f6:	1f 90       	pop	r1
 9f8:	18 95       	reti

Disassembly of section .text.ADC_Initialize:

00000b98 <ADC_Initialize>:

#include "ADC_Private.h"

void ADC_Initialize(adc_vref voltage , adc_prescaler prescaler)
{
	ADMUX |= 0x40;
 b98:	87 b1       	in	r24, 0x07	; 7
 b9a:	80 64       	ori	r24, 0x40	; 64
 b9c:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= 0xA7;
 b9e:	86 b1       	in	r24, 0x06	; 6
 ba0:	87 6a       	ori	r24, 0xA7	; 167
 ba2:	86 b9       	out	0x06, r24	; 6
 ba4:	08 95       	ret

Disassembly of section .text.ADC_Read:

0000072e <ADC_Read>:
}

uint16_t ADC_Read(adc_channel channel)
{
 72e:	e8 2f       	mov	r30, r24
	uint16_t val = 0;

	// Clear the ADC result register by reading it once
	uint16_t dummy = ADC_VAL;
 730:	84 b1       	in	r24, 0x04	; 4
 732:	95 b1       	in	r25, 0x05	; 5

	// Select the ADC channel
	switch (channel)
 734:	8e 2f       	mov	r24, r30
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	88 30       	cpi	r24, 0x08	; 8
 73a:	91 05       	cpc	r25, r1
 73c:	50 f5       	brcc	.+84     	; 0x792 <ADC_Read+0x64>
 73e:	fc 01       	movw	r30, r24
 740:	e6 5d       	subi	r30, 0xD6	; 214
 742:	ff 4f       	sbci	r31, 0xFF	; 255
 744:	0c 94 fa 05 	jmp	0xbf4	; 0xbf4 <__tablejump2__>
	{
		case ADC_0:
		ADMUX = (ADMUX & 0xF8) | 0x00; // Clear the channel bits and set ADC0
 748:	87 b1       	in	r24, 0x07	; 7
 74a:	88 7f       	andi	r24, 0xF8	; 248
 74c:	87 b9       	out	0x07, r24	; 7
		break;
 74e:	21 c0       	rjmp	.+66     	; 0x792 <ADC_Read+0x64>
		case ADC_1:
		ADMUX = (ADMUX & 0xF8) | 0x01; // Clear the channel bits and set ADC1
 750:	87 b1       	in	r24, 0x07	; 7
 752:	88 7f       	andi	r24, 0xF8	; 248
 754:	81 60       	ori	r24, 0x01	; 1
 756:	87 b9       	out	0x07, r24	; 7
		break;
 758:	1c c0       	rjmp	.+56     	; 0x792 <ADC_Read+0x64>
		case ADC_2:
		ADMUX = (ADMUX & 0xF8) | 0x02; // Clear the channel bits and set ADC2
 75a:	87 b1       	in	r24, 0x07	; 7
 75c:	88 7f       	andi	r24, 0xF8	; 248
 75e:	82 60       	ori	r24, 0x02	; 2
 760:	87 b9       	out	0x07, r24	; 7
		break;
 762:	17 c0       	rjmp	.+46     	; 0x792 <ADC_Read+0x64>
		case ADC_3:
		ADMUX = (ADMUX & 0xF8) | 0x03; // Clear the channel bits and set ADC3
 764:	87 b1       	in	r24, 0x07	; 7
 766:	88 7f       	andi	r24, 0xF8	; 248
 768:	83 60       	ori	r24, 0x03	; 3
 76a:	87 b9       	out	0x07, r24	; 7
		break;
 76c:	12 c0       	rjmp	.+36     	; 0x792 <ADC_Read+0x64>
		case ADC_4:
		ADMUX = (ADMUX & 0xF8) | 0x04; // Clear the channel bits and set ADC4
 76e:	87 b1       	in	r24, 0x07	; 7
 770:	88 7f       	andi	r24, 0xF8	; 248
 772:	84 60       	ori	r24, 0x04	; 4
 774:	87 b9       	out	0x07, r24	; 7
		break;
 776:	0d c0       	rjmp	.+26     	; 0x792 <ADC_Read+0x64>
		case ADC_5:
		ADMUX = (ADMUX & 0xF8) | 0x05; // Clear the channel bits and set ADC5
 778:	87 b1       	in	r24, 0x07	; 7
 77a:	88 7f       	andi	r24, 0xF8	; 248
 77c:	85 60       	ori	r24, 0x05	; 5
 77e:	87 b9       	out	0x07, r24	; 7
		break;
 780:	08 c0       	rjmp	.+16     	; 0x792 <ADC_Read+0x64>
		case ADC_6:
		ADMUX = (ADMUX & 0xF8) | 0x06; // Clear the channel bits and set ADC6
 782:	87 b1       	in	r24, 0x07	; 7
 784:	88 7f       	andi	r24, 0xF8	; 248
 786:	86 60       	ori	r24, 0x06	; 6
 788:	87 b9       	out	0x07, r24	; 7
		break;
 78a:	03 c0       	rjmp	.+6      	; 0x792 <ADC_Read+0x64>
		case ADC_7:
		ADMUX = (ADMUX & 0xF8) | 0x07; // Clear the channel bits and set ADC7
 78c:	87 b1       	in	r24, 0x07	; 7
 78e:	87 60       	ori	r24, 0x07	; 7
 790:	87 b9       	out	0x07, r24	; 7
		break;
	}

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 792:	86 b1       	in	r24, 0x06	; 6
 794:	80 64       	ori	r24, 0x40	; 64
 796:	86 b9       	out	0x06, r24	; 6

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
 798:	36 99       	sbic	0x06, 6	; 6
 79a:	fe cf       	rjmp	.-4      	; 0x798 <ADC_Read+0x6a>

	// Read the converted value
	val = ADC_VAL;
 79c:	84 b1       	in	r24, 0x04	; 4
 79e:	95 b1       	in	r25, 0x05	; 5

	return val;
}
 7a0:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

000001e4 <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
 1e4:	44 23       	and	r20, r20
 1e6:	19 f0       	breq	.+6      	; 0x1ee <DIO_SetPinDirection+0xa>
 1e8:	41 30       	cpi	r20, 0x01	; 1
 1ea:	c9 f1       	breq	.+114    	; 0x25e <DIO_SetPinDirection+0x7a>
 1ec:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	91 f0       	breq	.+36     	; 0x216 <DIO_SetPinDirection+0x32>
 1f2:	28 f0       	brcs	.+10     	; 0x1fe <DIO_SetPinDirection+0x1a>
 1f4:	82 30       	cpi	r24, 0x02	; 2
 1f6:	d9 f0       	breq	.+54     	; 0x22e <DIO_SetPinDirection+0x4a>
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	29 f1       	breq	.+74     	; 0x246 <DIO_SetPinDirection+0x62>
 1fc:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 1fe:	2a b3       	in	r18, 0x1a	; 26
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPinDirection+0x26>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPinDirection+0x22>
 20e:	80 95       	com	r24
 210:	82 23       	and	r24, r18
 212:	8a bb       	out	0x1a, r24	; 26
			break;
 214:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
 216:	27 b3       	in	r18, 0x17	; 23
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_SetPinDirection+0x3e>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_SetPinDirection+0x3a>
 226:	80 95       	com	r24
 228:	82 23       	and	r24, r18
 22a:	87 bb       	out	0x17, r24	; 23
			break;
 22c:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 22e:	24 b3       	in	r18, 0x14	; 20
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinDirection+0x56>
 236:	88 0f       	add	r24, r24
 238:	99 1f       	adc	r25, r25
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinDirection+0x52>
 23e:	80 95       	com	r24
 240:	82 23       	and	r24, r18
 242:	84 bb       	out	0x14, r24	; 20
			break;
 244:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 246:	21 b3       	in	r18, 0x11	; 17
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_SetPinDirection+0x6e>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	6a 95       	dec	r22
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_SetPinDirection+0x6a>
 256:	80 95       	com	r24
 258:	82 23       	and	r24, r18
 25a:	81 bb       	out	0x11, r24	; 17
			break;
 25c:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	89 f0       	breq	.+34     	; 0x284 <DIO_SetPinDirection+0xa0>
 262:	28 f0       	brcs	.+10     	; 0x26e <DIO_SetPinDirection+0x8a>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	c9 f0       	breq	.+50     	; 0x29a <DIO_SetPinDirection+0xb6>
 268:	83 30       	cpi	r24, 0x03	; 3
 26a:	11 f1       	breq	.+68     	; 0x2b0 <DIO_SetPinDirection+0xcc>
 26c:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 26e:	2a b3       	in	r18, 0x1a	; 26
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	02 c0       	rjmp	.+4      	; 0x27a <DIO_SetPinDirection+0x96>
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	6a 95       	dec	r22
 27c:	e2 f7       	brpl	.-8      	; 0x276 <DIO_SetPinDirection+0x92>
 27e:	82 2b       	or	r24, r18
 280:	8a bb       	out	0x1a, r24	; 26
			break;
 282:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 284:	27 b3       	in	r18, 0x17	; 23
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_SetPinDirection+0xac>
 28c:	88 0f       	add	r24, r24
 28e:	99 1f       	adc	r25, r25
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_SetPinDirection+0xa8>
 294:	82 2b       	or	r24, r18
 296:	87 bb       	out	0x17, r24	; 23
			break;
 298:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 29a:	24 b3       	in	r18, 0x14	; 20
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <DIO_SetPinDirection+0xc2>
 2a2:	88 0f       	add	r24, r24
 2a4:	99 1f       	adc	r25, r25
 2a6:	6a 95       	dec	r22
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <DIO_SetPinDirection+0xbe>
 2aa:	82 2b       	or	r24, r18
 2ac:	84 bb       	out	0x14, r24	; 20
			break;
 2ae:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 2b0:	21 b3       	in	r18, 0x11	; 17
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinDirection+0xd8>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	6a 95       	dec	r22
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinDirection+0xd4>
 2c0:	82 2b       	or	r24, r18
 2c2:	81 bb       	out	0x11, r24	; 17
 2c4:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

000002c6 <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(port Port, pin Pin, status Status)
{
	switch(Status)
 2c6:	44 23       	and	r20, r20
 2c8:	19 f0       	breq	.+6      	; 0x2d0 <DIO_SetPinValue+0xa>
 2ca:	41 30       	cpi	r20, 0x01	; 1
 2cc:	c9 f1       	breq	.+114    	; 0x340 <DIO_SetPinValue+0x7a>
 2ce:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 2d0:	81 30       	cpi	r24, 0x01	; 1
 2d2:	91 f0       	breq	.+36     	; 0x2f8 <DIO_SetPinValue+0x32>
 2d4:	28 f0       	brcs	.+10     	; 0x2e0 <DIO_SetPinValue+0x1a>
 2d6:	82 30       	cpi	r24, 0x02	; 2
 2d8:	d9 f0       	breq	.+54     	; 0x310 <DIO_SetPinValue+0x4a>
 2da:	83 30       	cpi	r24, 0x03	; 3
 2dc:	29 f1       	breq	.+74     	; 0x328 <DIO_SetPinValue+0x62>
 2de:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 2e0:	2b b3       	in	r18, 0x1b	; 27
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	90 e0       	ldi	r25, 0x00	; 0
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_SetPinValue+0x26>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	6a 95       	dec	r22
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_SetPinValue+0x22>
 2f0:	80 95       	com	r24
 2f2:	82 23       	and	r24, r18
 2f4:	8b bb       	out	0x1b, r24	; 27
			break;
 2f6:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, Pin);
 2f8:	28 b3       	in	r18, 0x18	; 24
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_SetPinValue+0x3e>
 300:	88 0f       	add	r24, r24
 302:	99 1f       	adc	r25, r25
 304:	6a 95       	dec	r22
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_SetPinValue+0x3a>
 308:	80 95       	com	r24
 30a:	82 23       	and	r24, r18
 30c:	88 bb       	out	0x18, r24	; 24
			break;
 30e:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 310:	25 b3       	in	r18, 0x15	; 21
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	02 c0       	rjmp	.+4      	; 0x31c <DIO_SetPinValue+0x56>
 318:	88 0f       	add	r24, r24
 31a:	99 1f       	adc	r25, r25
 31c:	6a 95       	dec	r22
 31e:	e2 f7       	brpl	.-8      	; 0x318 <DIO_SetPinValue+0x52>
 320:	80 95       	com	r24
 322:	82 23       	and	r24, r18
 324:	85 bb       	out	0x15, r24	; 21
			break;
 326:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 328:	22 b3       	in	r18, 0x12	; 18
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_SetPinValue+0x6e>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_SetPinValue+0x6a>
 338:	80 95       	com	r24
 33a:	82 23       	and	r24, r18
 33c:	82 bb       	out	0x12, r24	; 18
			break;
 33e:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (Port)
 340:	81 30       	cpi	r24, 0x01	; 1
 342:	89 f0       	breq	.+34     	; 0x366 <DIO_SetPinValue+0xa0>
 344:	28 f0       	brcs	.+10     	; 0x350 <DIO_SetPinValue+0x8a>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	c9 f0       	breq	.+50     	; 0x37c <DIO_SetPinValue+0xb6>
 34a:	83 30       	cpi	r24, 0x03	; 3
 34c:	11 f1       	breq	.+68     	; 0x392 <DIO_SetPinValue+0xcc>
 34e:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 350:	2b b3       	in	r18, 0x1b	; 27
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 c0       	rjmp	.+4      	; 0x35c <DIO_SetPinValue+0x96>
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	6a 95       	dec	r22
 35e:	e2 f7       	brpl	.-8      	; 0x358 <DIO_SetPinValue+0x92>
 360:	82 2b       	or	r24, r18
 362:	8b bb       	out	0x1b, r24	; 27
			break;
 364:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, Pin);
 366:	28 b3       	in	r18, 0x18	; 24
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_SetPinValue+0xac>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_SetPinValue+0xa8>
 376:	82 2b       	or	r24, r18
 378:	88 bb       	out	0x18, r24	; 24
			break;
 37a:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 37c:	25 b3       	in	r18, 0x15	; 21
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	90 e0       	ldi	r25, 0x00	; 0
 382:	02 c0       	rjmp	.+4      	; 0x388 <DIO_SetPinValue+0xc2>
 384:	88 0f       	add	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	6a 95       	dec	r22
 38a:	e2 f7       	brpl	.-8      	; 0x384 <DIO_SetPinValue+0xbe>
 38c:	82 2b       	or	r24, r18
 38e:	85 bb       	out	0x15, r24	; 21
			break;
 390:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 392:	22 b3       	in	r18, 0x12	; 18
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPinValue+0xd8>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPinValue+0xd4>
 3a2:	82 2b       	or	r24, r18
 3a4:	82 bb       	out	0x12, r24	; 18
 3a6:	08 95       	ret

Disassembly of section .text.External_Interrupt0_Initalize:

00000800 <External_Interrupt0_Initalize>:
#include "Interrupt_Private.h"

void External_Interrupt0_Initalize(int0_sense sense)
{
	// Define interrupt pin INT0 as input 
	CLR_BIT(DDRD,2);	
 800:	91 b3       	in	r25, 0x11	; 17
 802:	9b 7f       	andi	r25, 0xFB	; 251
 804:	91 bb       	out	0x11, r25	; 17
	// Disable global interrupt while initialization 
	cli();//Clear interrupt, CLR_BIT(SREG,7);
 806:	f8 94       	cli
	// Choose sensing method
	switch(sense)
 808:	81 30       	cpi	r24, 0x01	; 1
 80a:	69 f0       	breq	.+26     	; 0x826 <External_Interrupt0_Initalize+0x26>
 80c:	28 f0       	brcs	.+10     	; 0x818 <External_Interrupt0_Initalize+0x18>
 80e:	82 30       	cpi	r24, 0x02	; 2
 810:	c1 f0       	breq	.+48     	; 0x842 <External_Interrupt0_Initalize+0x42>
 812:	83 30       	cpi	r24, 0x03	; 3
 814:	79 f0       	breq	.+30     	; 0x834 <External_Interrupt0_Initalize+0x34>
 816:	1b c0       	rjmp	.+54     	; 0x84e <External_Interrupt0_Initalize+0x4e>
	{
		case INT0_LOW:
		CLR_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 0 0
 818:	85 b7       	in	r24, 0x35	; 53
 81a:	8d 7f       	andi	r24, 0xFD	; 253
 81c:	85 bf       	out	0x35, r24	; 53
 81e:	85 b7       	in	r24, 0x35	; 53
 820:	8e 7f       	andi	r24, 0xFE	; 254
 822:	85 bf       	out	0x35, r24	; 53
		break;
 824:	14 c0       	rjmp	.+40     	; 0x84e <External_Interrupt0_Initalize+0x4e>
		case INT0_HIGH:
		CLR_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 0 1
 826:	85 b7       	in	r24, 0x35	; 53
 828:	8d 7f       	andi	r24, 0xFD	; 253
 82a:	85 bf       	out	0x35, r24	; 53
 82c:	85 b7       	in	r24, 0x35	; 53
 82e:	81 60       	ori	r24, 0x01	; 1
 830:	85 bf       	out	0x35, r24	; 53
		break;
 832:	0d c0       	rjmp	.+26     	; 0x84e <External_Interrupt0_Initalize+0x4e>
		case INT0_FALLING:
		SET_BIT(MCUCR, ISC01);CLR_BIT(MCUCR, ISC00);// 1 0
 834:	85 b7       	in	r24, 0x35	; 53
 836:	82 60       	ori	r24, 0x02	; 2
 838:	85 bf       	out	0x35, r24	; 53
 83a:	85 b7       	in	r24, 0x35	; 53
 83c:	8e 7f       	andi	r24, 0xFE	; 254
 83e:	85 bf       	out	0x35, r24	; 53
		break;
 840:	06 c0       	rjmp	.+12     	; 0x84e <External_Interrupt0_Initalize+0x4e>
		case INT0_RISING:
		SET_BIT(MCUCR, ISC01);SET_BIT(MCUCR, ISC00);// 1 1
 842:	85 b7       	in	r24, 0x35	; 53
 844:	82 60       	ori	r24, 0x02	; 2
 846:	85 bf       	out	0x35, r24	; 53
 848:	85 b7       	in	r24, 0x35	; 53
 84a:	81 60       	ori	r24, 0x01	; 1
 84c:	85 bf       	out	0x35, r24	; 53
		break;
		
	}
	// Enable peripheral interrupt 
	SET_BIT(GICR, INT0);
 84e:	8b b7       	in	r24, 0x3b	; 59
 850:	80 64       	ori	r24, 0x40	; 64
 852:	8b bf       	out	0x3b, r24	; 59
	// Enable global interrupt after initialization 
	sei();//Set interrupt, SET_BIT(SREG,7);
 854:	78 94       	sei
 856:	08 95       	ret

Disassembly of section .text.UART_Initialize_WithoutInterrupt:

000000c4 <UART_Initialize_WithoutInterrupt>:
uart_status UART_Receive_Character(uint8_t* data)
{
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}
  c4:	0f 93       	push	r16
  c6:	31 b3       	in	r19, 0x11	; 17
  c8:	32 60       	ori	r19, 0x02	; 2
  ca:	31 bb       	out	0x11, r19	; 17
  cc:	31 b3       	in	r19, 0x11	; 17
  ce:	3e 7f       	andi	r19, 0xFE	; 254
  d0:	31 bb       	out	0x11, r19	; 17
  d2:	3a b1       	in	r19, 0x0a	; 10
  d4:	38 61       	ori	r19, 0x18	; 24
  d6:	3a b9       	out	0x0a, r19	; 10
  d8:	66 23       	and	r22, r22
  da:	19 f0       	breq	.+6      	; 0xe2 <UART_Initialize_WithoutInterrupt+0x1e>
  dc:	61 30       	cpi	r22, 0x01	; 1
  de:	29 f0       	breq	.+10     	; 0xea <UART_Initialize_WithoutInterrupt+0x26>
  e0:	07 c0       	rjmp	.+14     	; 0xf0 <UART_Initialize_WithoutInterrupt+0x2c>
  e2:	30 b5       	in	r19, 0x20	; 32
  e4:	3f 77       	andi	r19, 0x7F	; 127
  e6:	30 bd       	out	0x20, r19	; 32
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <UART_Initialize_WithoutInterrupt+0x2c>
  ea:	30 b5       	in	r19, 0x20	; 32
  ec:	30 68       	ori	r19, 0x80	; 128
  ee:	30 bd       	out	0x20, r19	; 32
  f0:	22 30       	cpi	r18, 0x02	; 2
  f2:	f9 f0       	breq	.+62     	; 0x132 <UART_Initialize_WithoutInterrupt+0x6e>
  f4:	28 f4       	brcc	.+10     	; 0x100 <UART_Initialize_WithoutInterrupt+0x3c>
  f6:	22 23       	and	r18, r18
  f8:	41 f0       	breq	.+16     	; 0x10a <UART_Initialize_WithoutInterrupt+0x46>
  fa:	21 30       	cpi	r18, 0x01	; 1
  fc:	81 f0       	breq	.+32     	; 0x11e <UART_Initialize_WithoutInterrupt+0x5a>
  fe:	36 c0       	rjmp	.+108    	; 0x16c <UART_Initialize_WithoutInterrupt+0xa8>
 100:	23 30       	cpi	r18, 0x03	; 3
 102:	09 f1       	breq	.+66     	; 0x146 <UART_Initialize_WithoutInterrupt+0x82>
 104:	24 30       	cpi	r18, 0x04	; 4
 106:	49 f1       	breq	.+82     	; 0x15a <UART_Initialize_WithoutInterrupt+0x96>
 108:	31 c0       	rjmp	.+98     	; 0x16c <UART_Initialize_WithoutInterrupt+0xa8>
 10a:	2a b1       	in	r18, 0x0a	; 10
 10c:	2b 7f       	andi	r18, 0xFB	; 251
 10e:	2a b9       	out	0x0a, r18	; 10
 110:	20 b5       	in	r18, 0x20	; 32
 112:	2b 7f       	andi	r18, 0xFB	; 251
 114:	20 bd       	out	0x20, r18	; 32
 116:	20 b5       	in	r18, 0x20	; 32
 118:	2d 7f       	andi	r18, 0xFD	; 253
 11a:	20 bd       	out	0x20, r18	; 32
 11c:	27 c0       	rjmp	.+78     	; 0x16c <UART_Initialize_WithoutInterrupt+0xa8>
 11e:	2a b1       	in	r18, 0x0a	; 10
 120:	2b 7f       	andi	r18, 0xFB	; 251
 122:	2a b9       	out	0x0a, r18	; 10
 124:	20 b5       	in	r18, 0x20	; 32
 126:	2b 7f       	andi	r18, 0xFB	; 251
 128:	20 bd       	out	0x20, r18	; 32
 12a:	20 b5       	in	r18, 0x20	; 32
 12c:	22 60       	ori	r18, 0x02	; 2
 12e:	20 bd       	out	0x20, r18	; 32
 130:	1d c0       	rjmp	.+58     	; 0x16c <UART_Initialize_WithoutInterrupt+0xa8>
 132:	2a b1       	in	r18, 0x0a	; 10
 134:	2b 7f       	andi	r18, 0xFB	; 251
 136:	2a b9       	out	0x0a, r18	; 10
 138:	20 b5       	in	r18, 0x20	; 32
 13a:	24 60       	ori	r18, 0x04	; 4
 13c:	20 bd       	out	0x20, r18	; 32
 13e:	20 b5       	in	r18, 0x20	; 32
 140:	2d 7f       	andi	r18, 0xFD	; 253
 142:	20 bd       	out	0x20, r18	; 32
 144:	13 c0       	rjmp	.+38     	; 0x16c <UART_Initialize_WithoutInterrupt+0xa8>
 146:	2a b1       	in	r18, 0x0a	; 10
 148:	2b 7f       	andi	r18, 0xFB	; 251
 14a:	2a b9       	out	0x0a, r18	; 10
 14c:	20 b5       	in	r18, 0x20	; 32
 14e:	24 60       	ori	r18, 0x04	; 4
 150:	20 bd       	out	0x20, r18	; 32
 152:	20 b5       	in	r18, 0x20	; 32
 154:	22 60       	ori	r18, 0x02	; 2
 156:	20 bd       	out	0x20, r18	; 32
 158:	09 c0       	rjmp	.+18     	; 0x16c <UART_Initialize_WithoutInterrupt+0xa8>
 15a:	2a b1       	in	r18, 0x0a	; 10
 15c:	24 60       	ori	r18, 0x04	; 4
 15e:	2a b9       	out	0x0a, r18	; 10
 160:	20 b5       	in	r18, 0x20	; 32
 162:	24 60       	ori	r18, 0x04	; 4
 164:	20 bd       	out	0x20, r18	; 32
 166:	20 b5       	in	r18, 0x20	; 32
 168:	22 60       	ori	r18, 0x02	; 2
 16a:	20 bd       	out	0x20, r18	; 32
 16c:	41 30       	cpi	r20, 0x01	; 1
 16e:	59 f0       	breq	.+22     	; 0x186 <UART_Initialize_WithoutInterrupt+0xc2>
 170:	18 f0       	brcs	.+6      	; 0x178 <UART_Initialize_WithoutInterrupt+0xb4>
 172:	42 30       	cpi	r20, 0x02	; 2
 174:	79 f0       	breq	.+30     	; 0x194 <UART_Initialize_WithoutInterrupt+0xd0>
 176:	14 c0       	rjmp	.+40     	; 0x1a0 <UART_Initialize_WithoutInterrupt+0xdc>
 178:	20 b5       	in	r18, 0x20	; 32
 17a:	2f 7d       	andi	r18, 0xDF	; 223
 17c:	20 bd       	out	0x20, r18	; 32
 17e:	20 b5       	in	r18, 0x20	; 32
 180:	2f 7e       	andi	r18, 0xEF	; 239
 182:	20 bd       	out	0x20, r18	; 32
 184:	0d c0       	rjmp	.+26     	; 0x1a0 <UART_Initialize_WithoutInterrupt+0xdc>
 186:	20 b5       	in	r18, 0x20	; 32
 188:	20 62       	ori	r18, 0x20	; 32
 18a:	20 bd       	out	0x20, r18	; 32
 18c:	20 b5       	in	r18, 0x20	; 32
 18e:	2f 7e       	andi	r18, 0xEF	; 239
 190:	20 bd       	out	0x20, r18	; 32
 192:	06 c0       	rjmp	.+12     	; 0x1a0 <UART_Initialize_WithoutInterrupt+0xdc>
 194:	20 b5       	in	r18, 0x20	; 32
 196:	20 62       	ori	r18, 0x20	; 32
 198:	20 bd       	out	0x20, r18	; 32
 19a:	20 b5       	in	r18, 0x20	; 32
 19c:	20 61       	ori	r18, 0x10	; 16
 19e:	20 bd       	out	0x20, r18	; 32
 1a0:	00 23       	and	r16, r16
 1a2:	19 f0       	breq	.+6      	; 0x1aa <UART_Initialize_WithoutInterrupt+0xe6>
 1a4:	01 30       	cpi	r16, 0x01	; 1
 1a6:	29 f0       	breq	.+10     	; 0x1b2 <UART_Initialize_WithoutInterrupt+0xee>
 1a8:	07 c0       	rjmp	.+14     	; 0x1b8 <UART_Initialize_WithoutInterrupt+0xf4>
 1aa:	20 b5       	in	r18, 0x20	; 32
 1ac:	27 7f       	andi	r18, 0xF7	; 247
 1ae:	20 bd       	out	0x20, r18	; 32
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <UART_Initialize_WithoutInterrupt+0xf4>
 1b2:	20 b5       	in	r18, 0x20	; 32
 1b4:	28 60       	ori	r18, 0x08	; 8
 1b6:	20 bd       	out	0x20, r18	; 32
 1b8:	9c 01       	movw	r18, r24
 1ba:	22 95       	swap	r18
 1bc:	32 95       	swap	r19
 1be:	30 7f       	andi	r19, 0xF0	; 240
 1c0:	32 27       	eor	r19, r18
 1c2:	20 7f       	andi	r18, 0xF0	; 240
 1c4:	32 27       	eor	r19, r18
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	71 e7       	ldi	r23, 0x71	; 113
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 15 05 	call	0xa2a	; 0xa2a <__divmodsi4>
 1d6:	21 50       	subi	r18, 0x01	; 1
 1d8:	31 09       	sbc	r19, r1
 1da:	29 b9       	out	0x09, r18	; 9
 1dc:	30 bd       	out	0x20, r19	; 32
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0f 91       	pop	r16
 1e2:	08 95       	ret

Disassembly of section .text.UART_Transmit_Character:

00000c00 <UART_Transmit_Character>:
	return UART_OK;

}
uart_status UART_Transmit_Character(uint8_t data)
{
	UDR = data;
 c00:	8c b9       	out	0x0c, r24	; 12
	while (((UCSRA>>TXC)&0x01) != 1);//Wait until flag of transmitting received
 c02:	5e 9b       	sbis	0x0b, 6	; 11
 c04:	fe cf       	rjmp	.-4      	; 0xc02 <UART_Transmit_Character+0x2>
	return UART_OK;
}
 c06:	81 e0       	ldi	r24, 0x01	; 1
 c08:	08 95       	ret

Disassembly of section .text.UART_Transmit_Word:

00000b14 <UART_Transmit_Word>:
	while (((UCSRA>>RXC)&0x01) != 1);//Wait until flag of receiving received
	*data = UDR;
	return UART_OK;
}

uart_status UART_Transmit_Word(uint16_t data){
 b14:	cf 93       	push	r28
 b16:	df 93       	push	r29
 b18:	d8 2f       	mov	r29, r24
	uint8_t high_byte = (data >> 8) & 0xFF;
	uint8_t low_byte = data & 0xFF;
	uart_status s=UART_Transmit_Character(high_byte);
 b1a:	89 2f       	mov	r24, r25
 b1c:	0e 94 00 06 	call	0xc00	; 0xc00 <UART_Transmit_Character>
 b20:	c8 2f       	mov	r28, r24
	s|= UART_Transmit_Character(low_byte);
 b22:	8d 2f       	mov	r24, r29
 b24:	0e 94 00 06 	call	0xc00	; 0xc00 <UART_Transmit_Character>
	return s;

}
 b28:	8c 2b       	or	r24, r28
 b2a:	df 91       	pop	r29
 b2c:	cf 91       	pop	r28
 b2e:	08 95       	ret

Disassembly of section .text:

00000c0a <__cmpsf2>:
 c0a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_cmp>
 c0e:	08 f4       	brcc	.+2      	; 0xc12 <__cmpsf2+0x8>
 c10:	81 e0       	ldi	r24, 0x01	; 1
 c12:	08 95       	ret

Disassembly of section .text:

000007a2 <__fixunssfsi>:
 7a2:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_splitA>
 7a6:	88 f0       	brcs	.+34     	; 0x7ca <__fixunssfsi+0x28>
 7a8:	9f 57       	subi	r25, 0x7F	; 127
 7aa:	98 f0       	brcs	.+38     	; 0x7d2 <__fixunssfsi+0x30>
 7ac:	b9 2f       	mov	r27, r25
 7ae:	99 27       	eor	r25, r25
 7b0:	b7 51       	subi	r27, 0x17	; 23
 7b2:	b0 f0       	brcs	.+44     	; 0x7e0 <__fixunssfsi+0x3e>
 7b4:	e1 f0       	breq	.+56     	; 0x7ee <__fixunssfsi+0x4c>
 7b6:	66 0f       	add	r22, r22
 7b8:	77 1f       	adc	r23, r23
 7ba:	88 1f       	adc	r24, r24
 7bc:	99 1f       	adc	r25, r25
 7be:	1a f0       	brmi	.+6      	; 0x7c6 <__fixunssfsi+0x24>
 7c0:	ba 95       	dec	r27
 7c2:	c9 f7       	brne	.-14     	; 0x7b6 <__fixunssfsi+0x14>
 7c4:	14 c0       	rjmp	.+40     	; 0x7ee <__fixunssfsi+0x4c>
 7c6:	b1 30       	cpi	r27, 0x01	; 1
 7c8:	91 f0       	breq	.+36     	; 0x7ee <__fixunssfsi+0x4c>
 7ca:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_zero>
 7ce:	b1 e0       	ldi	r27, 0x01	; 1
 7d0:	08 95       	ret
 7d2:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <__fp_zero>
 7d6:	67 2f       	mov	r22, r23
 7d8:	78 2f       	mov	r23, r24
 7da:	88 27       	eor	r24, r24
 7dc:	b8 5f       	subi	r27, 0xF8	; 248
 7de:	39 f0       	breq	.+14     	; 0x7ee <__fixunssfsi+0x4c>
 7e0:	b9 3f       	cpi	r27, 0xF9	; 249
 7e2:	cc f3       	brlt	.-14     	; 0x7d6 <__fixunssfsi+0x34>
 7e4:	86 95       	lsr	r24
 7e6:	77 95       	ror	r23
 7e8:	67 95       	ror	r22
 7ea:	b3 95       	inc	r27
 7ec:	d9 f7       	brne	.-10     	; 0x7e4 <__fixunssfsi+0x42>
 7ee:	3e f4       	brtc	.+14     	; 0x7fe <__fixunssfsi+0x5c>
 7f0:	90 95       	com	r25
 7f2:	80 95       	com	r24
 7f4:	70 95       	com	r23
 7f6:	61 95       	neg	r22
 7f8:	7f 4f       	sbci	r23, 0xFF	; 255
 7fa:	8f 4f       	sbci	r24, 0xFF	; 255
 7fc:	9f 4f       	sbci	r25, 0xFF	; 255
 7fe:	08 95       	ret

Disassembly of section .text:

0000063e <__floatunsisf>:
 63e:	e8 94       	clt
 640:	09 c0       	rjmp	.+18     	; 0x654 <__floatsisf+0x12>

00000642 <__floatsisf>:
 642:	97 fb       	bst	r25, 7
 644:	3e f4       	brtc	.+14     	; 0x654 <__floatsisf+0x12>
 646:	90 95       	com	r25
 648:	80 95       	com	r24
 64a:	70 95       	com	r23
 64c:	61 95       	neg	r22
 64e:	7f 4f       	sbci	r23, 0xFF	; 255
 650:	8f 4f       	sbci	r24, 0xFF	; 255
 652:	9f 4f       	sbci	r25, 0xFF	; 255
 654:	99 23       	and	r25, r25
 656:	a9 f0       	breq	.+42     	; 0x682 <__floatsisf+0x40>
 658:	f9 2f       	mov	r31, r25
 65a:	96 e9       	ldi	r25, 0x96	; 150
 65c:	bb 27       	eor	r27, r27
 65e:	93 95       	inc	r25
 660:	f6 95       	lsr	r31
 662:	87 95       	ror	r24
 664:	77 95       	ror	r23
 666:	67 95       	ror	r22
 668:	b7 95       	ror	r27
 66a:	f1 11       	cpse	r31, r1
 66c:	f8 cf       	rjmp	.-16     	; 0x65e <__floatsisf+0x1c>
 66e:	fa f4       	brpl	.+62     	; 0x6ae <__floatsisf+0x6c>
 670:	bb 0f       	add	r27, r27
 672:	11 f4       	brne	.+4      	; 0x678 <__floatsisf+0x36>
 674:	60 ff       	sbrs	r22, 0
 676:	1b c0       	rjmp	.+54     	; 0x6ae <__floatsisf+0x6c>
 678:	6f 5f       	subi	r22, 0xFF	; 255
 67a:	7f 4f       	sbci	r23, 0xFF	; 255
 67c:	8f 4f       	sbci	r24, 0xFF	; 255
 67e:	9f 4f       	sbci	r25, 0xFF	; 255
 680:	16 c0       	rjmp	.+44     	; 0x6ae <__floatsisf+0x6c>
 682:	88 23       	and	r24, r24
 684:	11 f0       	breq	.+4      	; 0x68a <__floatsisf+0x48>
 686:	96 e9       	ldi	r25, 0x96	; 150
 688:	11 c0       	rjmp	.+34     	; 0x6ac <__floatsisf+0x6a>
 68a:	77 23       	and	r23, r23
 68c:	21 f0       	breq	.+8      	; 0x696 <__floatsisf+0x54>
 68e:	9e e8       	ldi	r25, 0x8E	; 142
 690:	87 2f       	mov	r24, r23
 692:	76 2f       	mov	r23, r22
 694:	05 c0       	rjmp	.+10     	; 0x6a0 <__floatsisf+0x5e>
 696:	66 23       	and	r22, r22
 698:	71 f0       	breq	.+28     	; 0x6b6 <__floatsisf+0x74>
 69a:	96 e8       	ldi	r25, 0x86	; 134
 69c:	86 2f       	mov	r24, r22
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	60 e0       	ldi	r22, 0x00	; 0
 6a2:	2a f0       	brmi	.+10     	; 0x6ae <__floatsisf+0x6c>
 6a4:	9a 95       	dec	r25
 6a6:	66 0f       	add	r22, r22
 6a8:	77 1f       	adc	r23, r23
 6aa:	88 1f       	adc	r24, r24
 6ac:	da f7       	brpl	.-10     	; 0x6a4 <__floatsisf+0x62>
 6ae:	88 0f       	add	r24, r24
 6b0:	96 95       	lsr	r25
 6b2:	87 95       	ror	r24
 6b4:	97 f9       	bld	r25, 7
 6b6:	08 95       	ret

Disassembly of section .text:

000008f2 <__fp_cmp>:
 8f2:	99 0f       	add	r25, r25
 8f4:	00 08       	sbc	r0, r0
 8f6:	55 0f       	add	r21, r21
 8f8:	aa 0b       	sbc	r26, r26
 8fa:	e0 e8       	ldi	r30, 0x80	; 128
 8fc:	fe ef       	ldi	r31, 0xFE	; 254
 8fe:	16 16       	cp	r1, r22
 900:	17 06       	cpc	r1, r23
 902:	e8 07       	cpc	r30, r24
 904:	f9 07       	cpc	r31, r25
 906:	c0 f0       	brcs	.+48     	; 0x938 <__fp_cmp+0x46>
 908:	12 16       	cp	r1, r18
 90a:	13 06       	cpc	r1, r19
 90c:	e4 07       	cpc	r30, r20
 90e:	f5 07       	cpc	r31, r21
 910:	98 f0       	brcs	.+38     	; 0x938 <__fp_cmp+0x46>
 912:	62 1b       	sub	r22, r18
 914:	73 0b       	sbc	r23, r19
 916:	84 0b       	sbc	r24, r20
 918:	95 0b       	sbc	r25, r21
 91a:	39 f4       	brne	.+14     	; 0x92a <__fp_cmp+0x38>
 91c:	0a 26       	eor	r0, r26
 91e:	61 f0       	breq	.+24     	; 0x938 <__fp_cmp+0x46>
 920:	23 2b       	or	r18, r19
 922:	24 2b       	or	r18, r20
 924:	25 2b       	or	r18, r21
 926:	21 f4       	brne	.+8      	; 0x930 <__fp_cmp+0x3e>
 928:	08 95       	ret
 92a:	0a 26       	eor	r0, r26
 92c:	09 f4       	brne	.+2      	; 0x930 <__fp_cmp+0x3e>
 92e:	a1 40       	sbci	r26, 0x01	; 1
 930:	a6 95       	lsr	r26
 932:	8f ef       	ldi	r24, 0xFF	; 255
 934:	81 1d       	adc	r24, r1
 936:	81 1d       	adc	r24, r1
 938:	08 95       	ret

Disassembly of section .text:

0000093a <__fp_split3>:
 93a:	57 fd       	sbrc	r21, 7
 93c:	90 58       	subi	r25, 0x80	; 128
 93e:	44 0f       	add	r20, r20
 940:	55 1f       	adc	r21, r21
 942:	59 f0       	breq	.+22     	; 0x95a <__fp_splitA+0x10>
 944:	5f 3f       	cpi	r21, 0xFF	; 255
 946:	71 f0       	breq	.+28     	; 0x964 <__fp_splitA+0x1a>
 948:	47 95       	ror	r20

0000094a <__fp_splitA>:
 94a:	88 0f       	add	r24, r24
 94c:	97 fb       	bst	r25, 7
 94e:	99 1f       	adc	r25, r25
 950:	61 f0       	breq	.+24     	; 0x96a <__fp_splitA+0x20>
 952:	9f 3f       	cpi	r25, 0xFF	; 255
 954:	79 f0       	breq	.+30     	; 0x974 <__fp_splitA+0x2a>
 956:	87 95       	ror	r24
 958:	08 95       	ret
 95a:	12 16       	cp	r1, r18
 95c:	13 06       	cpc	r1, r19
 95e:	14 06       	cpc	r1, r20
 960:	55 1f       	adc	r21, r21
 962:	f2 cf       	rjmp	.-28     	; 0x948 <__fp_split3+0xe>
 964:	46 95       	lsr	r20
 966:	f1 df       	rcall	.-30     	; 0x94a <__fp_splitA>
 968:	08 c0       	rjmp	.+16     	; 0x97a <__fp_splitA+0x30>
 96a:	16 16       	cp	r1, r22
 96c:	17 06       	cpc	r1, r23
 96e:	18 06       	cpc	r1, r24
 970:	99 1f       	adc	r25, r25
 972:	f1 cf       	rjmp	.-30     	; 0x956 <__fp_splitA+0xc>
 974:	86 95       	lsr	r24
 976:	71 05       	cpc	r23, r1
 978:	61 05       	cpc	r22, r1
 97a:	08 94       	sec
 97c:	08 95       	ret

Disassembly of section .text:

00000ba6 <__fp_zero>:
 ba6:	e8 94       	clt

00000ba8 <__fp_szero>:
 ba8:	bb 27       	eor	r27, r27
 baa:	66 27       	eor	r22, r22
 bac:	77 27       	eor	r23, r23
 bae:	cb 01       	movw	r24, r22
 bb0:	97 f9       	bld	r25, 7
 bb2:	08 95       	ret

Disassembly of section .text:

00000c14 <__gesf2>:
 c14:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__fp_cmp>
 c18:	08 f4       	brcc	.+2      	; 0xc1c <__gesf2+0x8>
 c1a:	8f ef       	ldi	r24, 0xFF	; 255
 c1c:	08 95       	ret

Disassembly of section .text:

00000c1e <__mulsf3>:
 c1e:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <__mulsf3x>
 c22:	0c 94 68 05 	jmp	0xad0	; 0xad0 <__fp_round>

Disassembly of section .text:

000003a8 <__mulsf3x>:
 3a8:	0f c0       	rjmp	.+30     	; 0x3c8 <__mulsf3x+0x20>
 3aa:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_pscA>
 3ae:	38 f0       	brcs	.+14     	; 0x3be <__mulsf3x+0x16>
 3b0:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <__fp_pscB>
 3b4:	20 f0       	brcs	.+8      	; 0x3be <__mulsf3x+0x16>
 3b6:	95 23       	and	r25, r21
 3b8:	11 f0       	breq	.+4      	; 0x3be <__mulsf3x+0x16>
 3ba:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_inf>
 3be:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__fp_nan>
 3c2:	11 24       	eor	r1, r1
 3c4:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_szero>
 3c8:	0e 94 9d 04 	call	0x93a	; 0x93a <__fp_split3>
 3cc:	70 f3       	brcs	.-36     	; 0x3aa <__mulsf3x+0x2>

000003ce <__mulsf3_pse>:
 3ce:	95 9f       	mul	r25, r21
 3d0:	c1 f3       	breq	.-16     	; 0x3c2 <__mulsf3x+0x1a>
 3d2:	95 0f       	add	r25, r21
 3d4:	50 e0       	ldi	r21, 0x00	; 0
 3d6:	55 1f       	adc	r21, r21
 3d8:	62 9f       	mul	r22, r18
 3da:	f0 01       	movw	r30, r0
 3dc:	72 9f       	mul	r23, r18
 3de:	bb 27       	eor	r27, r27
 3e0:	f0 0d       	add	r31, r0
 3e2:	b1 1d       	adc	r27, r1
 3e4:	63 9f       	mul	r22, r19
 3e6:	aa 27       	eor	r26, r26
 3e8:	f0 0d       	add	r31, r0
 3ea:	b1 1d       	adc	r27, r1
 3ec:	aa 1f       	adc	r26, r26
 3ee:	64 9f       	mul	r22, r20
 3f0:	66 27       	eor	r22, r22
 3f2:	b0 0d       	add	r27, r0
 3f4:	a1 1d       	adc	r26, r1
 3f6:	66 1f       	adc	r22, r22
 3f8:	82 9f       	mul	r24, r18
 3fa:	22 27       	eor	r18, r18
 3fc:	b0 0d       	add	r27, r0
 3fe:	a1 1d       	adc	r26, r1
 400:	62 1f       	adc	r22, r18
 402:	73 9f       	mul	r23, r19
 404:	b0 0d       	add	r27, r0
 406:	a1 1d       	adc	r26, r1
 408:	62 1f       	adc	r22, r18
 40a:	83 9f       	mul	r24, r19
 40c:	a0 0d       	add	r26, r0
 40e:	61 1d       	adc	r22, r1
 410:	22 1f       	adc	r18, r18
 412:	74 9f       	mul	r23, r20
 414:	33 27       	eor	r19, r19
 416:	a0 0d       	add	r26, r0
 418:	61 1d       	adc	r22, r1
 41a:	23 1f       	adc	r18, r19
 41c:	84 9f       	mul	r24, r20
 41e:	60 0d       	add	r22, r0
 420:	21 1d       	adc	r18, r1
 422:	82 2f       	mov	r24, r18
 424:	76 2f       	mov	r23, r22
 426:	6a 2f       	mov	r22, r26
 428:	11 24       	eor	r1, r1
 42a:	9f 57       	subi	r25, 0x7F	; 127
 42c:	50 40       	sbci	r21, 0x00	; 0
 42e:	9a f0       	brmi	.+38     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 430:	f1 f0       	breq	.+60     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 432:	88 23       	and	r24, r24
 434:	4a f0       	brmi	.+18     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 436:	ee 0f       	add	r30, r30
 438:	ff 1f       	adc	r31, r31
 43a:	bb 1f       	adc	r27, r27
 43c:	66 1f       	adc	r22, r22
 43e:	77 1f       	adc	r23, r23
 440:	88 1f       	adc	r24, r24
 442:	91 50       	subi	r25, 0x01	; 1
 444:	50 40       	sbci	r21, 0x00	; 0
 446:	a9 f7       	brne	.-22     	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 448:	9e 3f       	cpi	r25, 0xFE	; 254
 44a:	51 05       	cpc	r21, r1
 44c:	80 f0       	brcs	.+32     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 44e:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_inf>
 452:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__fp_szero>
 456:	5f 3f       	cpi	r21, 0xFF	; 255
 458:	e4 f3       	brlt	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	98 3e       	cpi	r25, 0xE8	; 232
 45c:	d4 f3       	brlt	.-12     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45e:	86 95       	lsr	r24
 460:	77 95       	ror	r23
 462:	67 95       	ror	r22
 464:	b7 95       	ror	r27
 466:	f7 95       	ror	r31
 468:	e7 95       	ror	r30
 46a:	9f 5f       	subi	r25, 0xFF	; 255
 46c:	c1 f7       	brne	.-16     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 46e:	fe 2b       	or	r31, r30
 470:	88 0f       	add	r24, r24
 472:	91 1d       	adc	r25, r1
 474:	96 95       	lsr	r25
 476:	87 95       	ror	r24
 478:	97 f9       	bld	r25, 7
 47a:	08 95       	ret

Disassembly of section .text:

00000be8 <__fp_inf>:
 be8:	97 f9       	bld	r25, 7
 bea:	9f 67       	ori	r25, 0x7F	; 127
 bec:	80 e8       	ldi	r24, 0x80	; 128
 bee:	70 e0       	ldi	r23, 0x00	; 0
 bf0:	60 e0       	ldi	r22, 0x00	; 0
 bf2:	08 95       	ret

Disassembly of section .text:

00000c26 <__fp_nan>:
 c26:	9f ef       	ldi	r25, 0xFF	; 255
 c28:	80 ec       	ldi	r24, 0xC0	; 192
 c2a:	08 95       	ret

Disassembly of section .text:

00000bb4 <__fp_pscA>:
 bb4:	00 24       	eor	r0, r0
 bb6:	0a 94       	dec	r0
 bb8:	16 16       	cp	r1, r22
 bba:	17 06       	cpc	r1, r23
 bbc:	18 06       	cpc	r1, r24
 bbe:	09 06       	cpc	r0, r25
 bc0:	08 95       	ret

Disassembly of section .text:

00000bc2 <__fp_pscB>:
 bc2:	00 24       	eor	r0, r0
 bc4:	0a 94       	dec	r0
 bc6:	12 16       	cp	r1, r18
 bc8:	13 06       	cpc	r1, r19
 bca:	14 06       	cpc	r1, r20
 bcc:	05 06       	cpc	r0, r21
 bce:	08 95       	ret

Disassembly of section .text:

00000ad0 <__fp_round>:
 ad0:	09 2e       	mov	r0, r25
 ad2:	03 94       	inc	r0
 ad4:	00 0c       	add	r0, r0
 ad6:	11 f4       	brne	.+4      	; 0xadc <__fp_round+0xc>
 ad8:	88 23       	and	r24, r24
 ada:	52 f0       	brmi	.+20     	; 0xaf0 <__fp_round+0x20>
 adc:	bb 0f       	add	r27, r27
 ade:	40 f4       	brcc	.+16     	; 0xaf0 <__fp_round+0x20>
 ae0:	bf 2b       	or	r27, r31
 ae2:	11 f4       	brne	.+4      	; 0xae8 <__fp_round+0x18>
 ae4:	60 ff       	sbrs	r22, 0
 ae6:	04 c0       	rjmp	.+8      	; 0xaf0 <__fp_round+0x20>
 ae8:	6f 5f       	subi	r22, 0xFF	; 255
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000097e <__udivmodsi4>:
 97e:	a1 e2       	ldi	r26, 0x21	; 33
 980:	1a 2e       	mov	r1, r26
 982:	aa 1b       	sub	r26, r26
 984:	bb 1b       	sub	r27, r27
 986:	fd 01       	movw	r30, r26
 988:	0d c0       	rjmp	.+26     	; 0x9a4 <__udivmodsi4_ep>

0000098a <__udivmodsi4_loop>:
 98a:	aa 1f       	adc	r26, r26
 98c:	bb 1f       	adc	r27, r27
 98e:	ee 1f       	adc	r30, r30
 990:	ff 1f       	adc	r31, r31
 992:	a2 17       	cp	r26, r18
 994:	b3 07       	cpc	r27, r19
 996:	e4 07       	cpc	r30, r20
 998:	f5 07       	cpc	r31, r21
 99a:	20 f0       	brcs	.+8      	; 0x9a4 <__udivmodsi4_ep>
 99c:	a2 1b       	sub	r26, r18
 99e:	b3 0b       	sbc	r27, r19
 9a0:	e4 0b       	sbc	r30, r20
 9a2:	f5 0b       	sbc	r31, r21

000009a4 <__udivmodsi4_ep>:
 9a4:	66 1f       	adc	r22, r22
 9a6:	77 1f       	adc	r23, r23
 9a8:	88 1f       	adc	r24, r24
 9aa:	99 1f       	adc	r25, r25
 9ac:	1a 94       	dec	r1
 9ae:	69 f7       	brne	.-38     	; 0x98a <__udivmodsi4_loop>
 9b0:	60 95       	com	r22
 9b2:	70 95       	com	r23
 9b4:	80 95       	com	r24
 9b6:	90 95       	com	r25
 9b8:	9b 01       	movw	r18, r22
 9ba:	ac 01       	movw	r20, r24
 9bc:	bd 01       	movw	r22, r26
 9be:	cf 01       	movw	r24, r30
 9c0:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000a2a <__divmodsi4>:
 a2a:	05 2e       	mov	r0, r21
 a2c:	97 fb       	bst	r25, 7
 a2e:	1e f4       	brtc	.+6      	; 0xa36 <__divmodsi4+0xc>
 a30:	00 94       	com	r0
 a32:	0e 94 c4 05 	call	0xb88	; 0xb88 <__negsi2>
 a36:	57 fd       	sbrc	r21, 7
 a38:	07 d0       	rcall	.+14     	; 0xa48 <__divmodsi4_neg2>
 a3a:	0e 94 bf 04 	call	0x97e	; 0x97e <__udivmodsi4>
 a3e:	07 fc       	sbrc	r0, 7
 a40:	03 d0       	rcall	.+6      	; 0xa48 <__divmodsi4_neg2>
 a42:	4e f4       	brtc	.+18     	; 0xa56 <__divmodsi4_exit>
 a44:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__negsi2>

00000a48 <__divmodsi4_neg2>:
 a48:	50 95       	com	r21
 a4a:	40 95       	com	r20
 a4c:	30 95       	com	r19
 a4e:	21 95       	neg	r18
 a50:	3f 4f       	sbci	r19, 0xFF	; 255
 a52:	4f 4f       	sbci	r20, 0xFF	; 255
 a54:	5f 4f       	sbci	r21, 0xFF	; 255

00000a56 <__divmodsi4_exit>:
 a56:	08 95       	ret

Disassembly of section .text.libgcc.div:

00000b88 <__negsi2>:
 b88:	90 95       	com	r25
 b8a:	80 95       	com	r24
 b8c:	70 95       	com	r23
 b8e:	61 95       	neg	r22
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	08 95       	ret

Disassembly of section .text.libgcc:

00000bf4 <__tablejump2__>:
 bf4:	ee 0f       	add	r30, r30
 bf6:	ff 1f       	adc	r31, r31
 bf8:	05 90       	lpm	r0, Z+
 bfa:	f4 91       	lpm	r31, Z
 bfc:	e0 2d       	mov	r30, r0
 bfe:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

00000c34 <_fini>:
 c34:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000c36 <__funcs_on_exit>:
 c36:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00000c38 <__simulator_exit>:
 c38:	08 95       	ret

Disassembly of section .text.exit:

00000b60 <exit>:
 b60:	ec 01       	movw	r28, r24
 b62:	0e 94 1b 06 	call	0xc36	; 0xc36 <__funcs_on_exit>
 b66:	0e 94 1a 06 	call	0xc34	; 0xc34 <_fini>
 b6a:	ce 01       	movw	r24, r28
 b6c:	0e 94 1c 06 	call	0xc38	; 0xc38 <__simulator_exit>
 b70:	ce 01       	movw	r24, r28
 b72:	0e 94 18 06 	call	0xc30	; 0xc30 <_Exit>

Disassembly of section .text._Exit:

00000c30 <_Exit>:
 c30:	0e 94 60 00 	call	0xc0	; 0xc0 <_exit>

Disassembly of section .text.avrlibc:

00000b76 <eeprom_read_byte>:
 b76:	cb 01       	movw	r24, r22
 b78:	e1 99       	sbic	0x1c, 1	; 28
 b7a:	fe cf       	rjmp	.-4      	; 0xb78 <eeprom_read_byte+0x2>
 b7c:	9f bb       	out	0x1f, r25	; 31
 b7e:	8e bb       	out	0x1e, r24	; 30
 b80:	e0 9a       	sbi	0x1c, 0	; 28
 b82:	99 27       	eor	r25, r25
 b84:	8d b3       	in	r24, 0x1d	; 29
 b86:	08 95       	ret

Disassembly of section .text.avrlibc:

00000af2 <eeprom_update_byte>:
 af2:	26 2f       	mov	r18, r22

00000af4 <eeprom_update_r18>:
 af4:	e1 99       	sbic	0x1c, 1	; 28
 af6:	fe cf       	rjmp	.-4      	; 0xaf4 <eeprom_update_r18>
 af8:	9f bb       	out	0x1f, r25	; 31
 afa:	8e bb       	out	0x1e, r24	; 30
 afc:	e0 9a       	sbi	0x1c, 0	; 28
 afe:	01 97       	sbiw	r24, 0x01	; 1
 b00:	0d b2       	in	r0, 0x1d	; 29
 b02:	02 16       	cp	r0, r18
 b04:	31 f0       	breq	.+12     	; 0xb12 <eeprom_update_r18+0x1e>
 b06:	2d bb       	out	0x1d, r18	; 29
 b08:	0f b6       	in	r0, 0x3f	; 63
 b0a:	f8 94       	cli
 b0c:	e2 9a       	sbi	0x1c, 2	; 28
 b0e:	e1 9a       	sbi	0x1c, 1	; 28
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	08 95       	ret

Disassembly of section .text.avrlibc:

00000b30 <eeprom_write_byte>:
 b30:	26 2f       	mov	r18, r22

00000b32 <eeprom_write_r18>:
 b32:	e1 99       	sbic	0x1c, 1	; 28
 b34:	fe cf       	rjmp	.-4      	; 0xb32 <eeprom_write_r18>
 b36:	9f bb       	out	0x1f, r25	; 31
 b38:	8e bb       	out	0x1e, r24	; 30
 b3a:	2d bb       	out	0x1d, r18	; 29
 b3c:	0f b6       	in	r0, 0x3f	; 63
 b3e:	f8 94       	cli
 b40:	e2 9a       	sbi	0x1c, 2	; 28
 b42:	e1 9a       	sbi	0x1c, 1	; 28
 b44:	0f be       	out	0x3f, r0	; 63
 b46:	01 96       	adiw	r24, 0x01	; 1
 b48:	08 95       	ret
