
Task1_source_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000be  00000000  00000000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000000be  00000274  2**0
                  ALLOC
  2 .comment      0000002f  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 000000e0  00000000  00000000  000006b7  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000188  00000000  00000000  00000798  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002605  00000000  00000000  00000920  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009bf  00000000  00000000  00002f25  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e07  00000000  00000000  000038e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001fc  00000000  00000000  000046ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000297  00000000  00000000  000048e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000995  00000000  00000000  00004b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e8  00000000  00000000  00005514  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000005a6  000005a6  0000067a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000055fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.Initialize_E2PROM_State 0000000c  00000552  00000552  00000626  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.Read_E2PROM_State 00000006  00000594  00000594  00000668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.check_State 00000038  00000462  00000462  00000536  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.handle_event 00000006  0000059a  0000059a  0000066e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Initialize_TEMP_SENSOR 0000000c  0000055e  0000055e  00000632  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.Read_TEMP_SENSOR 0000002a  0000049a  0000049a  0000056e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.DC_Initialize 0000004a  00000344  00000344  00000418  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000048  0000038e  0000038e  00000462  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .bss.temperature 00000004  00800060  00800060  00000688  2**0
                  ALLOC
 23 .bss.currentState 00000001  00800064  00800064  00000688  2**0
                  ALLOC
 24 .text.ADC_Read 00000056  000002ee  000002ee  000003c2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.DIO_SetPinDirection 000000e2  000000be  000000be  00000192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text         0000000a  00000582  00000582  00000656  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text         0000007a  00000274  00000274  00000348  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text         00000048  000003d6  000003d6  000004aa  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text         00000008  0000058c  0000058c  00000660  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text         000000d4  000001a0  000001a0  00000274  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text         0000000c  0000056a  0000056a  0000063e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text         00000006  000005a0  000005a0  00000674  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text         0000000e  00000528  00000528  000005fc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text         0000000e  00000536  00000536  0000060a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text         00000022  000004c4  000004c4  00000598  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text         00000044  0000041e  0000041e  000004f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text         0000000e  00000544  00000544  00000618  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.libgcc  0000000c  00000576  00000576  0000064a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.__dummy_fini 00000002  000005ae  000005ae  00000682  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.__dummy_funcs_on_exit 00000002  000005b0  000005b0  00000684  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.__dummy_simulator_exit 00000002  000005b2  000005b2  00000686  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.exit    00000016  00000500  00000500  000005d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text._Exit   00000004  000005aa  000005aa  0000067e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.avrlibc 00000012  00000516  00000516  000005ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc 0000001a  000004e6  000004e6  000005ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
   4:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
   8:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
   c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  10:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  14:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  18:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  1c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  20:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  24:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  28:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  2c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  30:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  34:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  38:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  3c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  40:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  44:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  48:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  4c:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  50:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__bad_interrupt>
  54:	80 01       	movw	r16, r0
  56:	83 01       	movw	r16, r6
  58:	87 01       	movw	r16, r14
  5a:	8b 01       	movw	r16, r22
  5c:	8f 01       	movw	r16, r30
  5e:	93 01       	movw	r18, r6
  60:	97 01       	movw	r18, r14
  62:	9b 01       	movw	r18, r22

00000064 <.dinit>:
  64:	00 60       	ori	r16, 0x00	; 0
  66:	00 65       	ori	r16, 0x50	; 80
  68:	80 00       	.word	0x0080	; ????

0000006a <__ctors_end>:
  6a:	11 24       	eor	r1, r1
  6c:	1f be       	out	0x3f, r1	; 63
  6e:	cf e5       	ldi	r28, 0x5F	; 95
  70:	d8 e0       	ldi	r29, 0x08	; 8
  72:	de bf       	out	0x3e, r29	; 62
  74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
  76:	e4 e6       	ldi	r30, 0x64	; 100
  78:	f0 e0       	ldi	r31, 0x00	; 0
  7a:	40 e0       	ldi	r20, 0x00	; 0
  7c:	17 c0       	rjmp	.+46     	; 0xac <__do_clear_bss+0x8>
  7e:	b5 91       	lpm	r27, Z+
  80:	a5 91       	lpm	r26, Z+
  82:	35 91       	lpm	r19, Z+
  84:	25 91       	lpm	r18, Z+
  86:	05 91       	lpm	r16, Z+
  88:	07 fd       	sbrc	r16, 7
  8a:	0c c0       	rjmp	.+24     	; 0xa4 <__do_clear_bss>
  8c:	95 91       	lpm	r25, Z+
  8e:	85 91       	lpm	r24, Z+
  90:	ef 01       	movw	r28, r30
  92:	f9 2f       	mov	r31, r25
  94:	e8 2f       	mov	r30, r24
  96:	05 90       	lpm	r0, Z+
  98:	0d 92       	st	X+, r0
  9a:	a2 17       	cp	r26, r18
  9c:	b3 07       	cpc	r27, r19
  9e:	d9 f7       	brne	.-10     	; 0x96 <__do_copy_data+0x20>
  a0:	fe 01       	movw	r30, r28
  a2:	04 c0       	rjmp	.+8      	; 0xac <__do_clear_bss+0x8>

000000a4 <__do_clear_bss>:
  a4:	1d 92       	st	X+, r1
  a6:	a2 17       	cp	r26, r18
  a8:	b3 07       	cpc	r27, r19
  aa:	e1 f7       	brne	.-8      	; 0xa4 <__do_clear_bss>
  ac:	e9 36       	cpi	r30, 0x69	; 105
  ae:	f4 07       	cpc	r31, r20
  b0:	31 f7       	brne	.-52     	; 0x7e <__do_copy_data+0x8>
  b2:	0e 94 c7 01 	call	0x38e	; 0x38e <main>
  b6:	0c 94 80 02 	jmp	0x500	; 0x500 <exit>

000000ba <_exit>:
  ba:	f8 94       	cli

000000bc <__stop_program>:
  bc:	ff cf       	rjmp	.-2      	; 0xbc <__stop_program>

Disassembly of section .text:

000005a6 <__bad_interrupt>:
 5a6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.Initialize_E2PROM_State:

00000552 <Initialize_E2PROM_State>:


void Initialize_E2PROM_State(void){
	
	/* It should have a normal state first	*/
	eeprom_write_byte ((uint8_t)EEPROM_State_Add, (uint8_t)Normal_state);	
 552:	60 e0       	ldi	r22, 0x00	; 0
 554:	80 e4       	ldi	r24, 0x40	; 64
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	0e 94 73 02 	call	0x4e6	; 0x4e6 <eeprom_write_byte>
 55c:	08 95       	ret

Disassembly of section .text.Read_E2PROM_State:

00000594 <Read_E2PROM_State>:
}

E2PROM_State Read_E2PROM_State (const uint8_t *EEPROM_Add){
	
	/*	read the state	*/
	E2PROM_State x= eeprom_read_byte (EEPROM_Add); 		
 594:	0e 94 8b 02 	call	0x516	; 0x516 <eeprom_read_byte>
	return x;
}
 598:	08 95       	ret

Disassembly of section .text.check_State:

00000462 <check_State>:
	
	/*	check the state	*/
	check_State(T,S);
}

void check_State(temp *T,E2PROM_State* S){
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	eb 01       	movw	r28, r22
	
	/*	check if the state is changed	*/
	if(*T<20.0 && *S!=Normal_state){
 468:	fc 01       	movw	r30, r24
 46a:	60 81       	ld	r22, Z
 46c:	71 81       	ldd	r23, Z+1	; 0x01
 46e:	82 81       	ldd	r24, Z+2	; 0x02
 470:	93 81       	ldd	r25, Z+3	; 0x03
 472:	20 e0       	ldi	r18, 0x00	; 0
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	40 ea       	ldi	r20, 0xA0	; 160
 478:	51 e4       	ldi	r21, 0x41	; 65
 47a:	0e 94 c1 02 	call	0x582	; 0x582 <__cmpsf2>
 47e:	88 23       	and	r24, r24
 480:	4c f4       	brge	.+18     	; 0x494 <check_State+0x32>
 482:	88 81       	ld	r24, Y
 484:	88 23       	and	r24, r24
 486:	31 f0       	breq	.+12     	; 0x494 <check_State+0x32>
		*S=Normal_state;
 488:	18 82       	st	Y, r1
		eeprom_write_byte ((uint8_t)EEPROM_State_Add, *S);
 48a:	60 e0       	ldi	r22, 0x00	; 0
 48c:	80 e4       	ldi	r24, 0x40	; 64
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	0e 94 73 02 	call	0x4e6	; 0x4e6 <eeprom_write_byte>
	}
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	08 95       	ret

Disassembly of section .text.handle_event:

0000059a <handle_event>:


void handle_event(temp* T, E2PROM_State* S){
	
	/*	check the state	*/
	check_State(T,S);
 59a:	0e 94 31 02 	call	0x462	; 0x462 <check_State>
 59e:	08 95       	ret

Disassembly of section .text.Initialize_TEMP_SENSOR:

0000055e <Initialize_TEMP_SENSOR>:

#include "LM35_TMP_Sensor_Private.h"

void Initialize_TEMP_SENSOR(void)
{
	DIO_SetPinDirection(TEMP_SEN_PORT, TEMP_SEN_PIN, DIO_OUTPUT);
 55e:	41 e0       	ldi	r20, 0x01	; 1
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
 568:	08 95       	ret

Disassembly of section .text.Read_TEMP_SENSOR:

0000049a <Read_TEMP_SENSOR>:
}

temp Read_TEMP_SENSOR(void){
	uint16_t temp_volt=ADC_Read(TEMP_SEN_PIN);
 49a:	80 e0       	ldi	r24, 0x00	; 0
 49c:	0e 94 77 01 	call	0x2ee	; 0x2ee <ADC_Read>
	temp temp_read = temp_volt*500.0/1024.0 ;
 4a0:	bc 01       	movw	r22, r24
 4a2:	80 e0       	ldi	r24, 0x00	; 0
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 3a 01 	call	0x274	; 0x274 <__floatunsisf>
 4aa:	20 e0       	ldi	r18, 0x00	; 0
 4ac:	30 e0       	ldi	r19, 0x00	; 0
 4ae:	4a ef       	ldi	r20, 0xFA	; 250
 4b0:	53 e4       	ldi	r21, 0x43	; 67
 4b2:	0e 94 c6 02 	call	0x58c	; 0x58c <__mulsf3>
 4b6:	20 e0       	ldi	r18, 0x00	; 0
 4b8:	30 e0       	ldi	r19, 0x00	; 0
 4ba:	40 e8       	ldi	r20, 0x80	; 128
 4bc:	5a e3       	ldi	r21, 0x3A	; 58
 4be:	0e 94 c6 02 	call	0x58c	; 0x58c <__mulsf3>
	return temp_read;
 4c2:	08 95       	ret

Disassembly of section .text.DC_Initialize:

00000344 <DC_Initialize>:

#include "DC_Private.h"

void DC_Initialize(dc_motor motor)
{
	switch(motor)
 344:	88 23       	and	r24, r24
 346:	19 f0       	breq	.+6      	; 0x34e <DC_Initialize+0xa>
 348:	81 30       	cpi	r24, 0x01	; 1
 34a:	89 f0       	breq	.+34     	; 0x36e <DC_Initialize+0x2a>
 34c:	08 95       	ret
	{
		case DC_Motor1:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable1_Pin, DC_OUTPUT);
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	82 e0       	ldi	r24, 0x02	; 2
 354:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A1, DC_OUTPUT);
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	82 e0       	ldi	r24, 0x02	; 2
 35e:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor1_A2, DC_OUTPUT);
 362:	41 e0       	ldi	r20, 0x01	; 1
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	82 e0       	ldi	r24, 0x02	; 2
 368:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
		break;
 36c:	08 95       	ret
		case DC_Motor2:
		DIO_SetPinDirection(DC_Enable_Port, DC_Enable2_Pin, DC_OUTPUT);
 36e:	41 e0       	ldi	r20, 0x01	; 1
 370:	62 e0       	ldi	r22, 0x02	; 2
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A3, DC_OUTPUT);
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	62 e0       	ldi	r22, 0x02	; 2
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
		DIO_SetPinDirection(DC_Motor_Port, DC_Motor2_A4, DC_OUTPUT);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	62 e0       	ldi	r22, 0x02	; 2
 386:	82 e0       	ldi	r24, 0x02	; 2
 388:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
 38c:	08 95       	ret

Disassembly of section .text.main:

0000038e <main>:

int main(void)
{	
	/*		Initializations		*/
	dc_motor DC_fan1=DC_Motor1;
	DC_Initialize(DC_fan1);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 a2 01 	call	0x344	; 0x344 <DC_Initialize>
	Initialize_E2PROM_State();
 394:	0e 94 a9 02 	call	0x552	; 0x552 <Initialize_E2PROM_State>
	Initialize_TEMP_SENSOR();
 398:	0e 94 af 02 	call	0x55e	; 0x55e <Initialize_TEMP_SENSOR>
	DIO_SetPinDirection(BOT1_PORT,BOT1_PIN,DIO_INPUT); //push button 
 39c:	88 b3       	in	r24, 0x18	; 24
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	0e 94 5f 00 	call	0xbe	; 0xbe <__data_load_end>
	UART_Init();
	Timer_Init();
	*/
	
	// Read initial state from EEPROM
	currentState = Read_E2PROM_State(EEPROM_State_Add);
 3a6:	60 e4       	ldi	r22, 0x40	; 64
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	0e 94 ca 02 	call	0x594	; 0x594 <Read_E2PROM_State>
 3b0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentState>
	
	/*	Main	Code	*/
    while(1)
    {	
		temperature=Read_TEMP_SENSOR();
 3b4:	0e 94 4d 02 	call	0x49a	; 0x49a <Read_TEMP_SENSOR>
 3b8:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
 3bc:	70 93 61 00 	sts	0x0061, r23	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 3c0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 3c4:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		
		handle_event(&temperature,&currentState);
 3c8:	64 e6       	ldi	r22, 0x64	; 100
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	80 e6       	ldi	r24, 0x60	; 96
 3ce:	90 e0       	ldi	r25, 0x00	; 0
 3d0:	0e 94 cd 02 	call	0x59a	; 0x59a <handle_event>
 3d4:	ef cf       	rjmp	.-34     	; 0x3b4 <main+0x26>

Disassembly of section .text.ADC_Read:

000002ee <ADC_Read>:
	ADCSRA |= (1 << ADIE);
}
uint16_t ADC_Read(adc_channel channel)
{
	uint16_t val = 0;
	switch(channel)
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	88 30       	cpi	r24, 0x08	; 8
 2f2:	91 05       	cpc	r25, r1
 2f4:	18 f5       	brcc	.+70     	; 0x33c <ADC_Read+0x4e>
 2f6:	fc 01       	movw	r30, r24
 2f8:	e6 5d       	subi	r30, 0xD6	; 214
 2fa:	ff 4f       	sbci	r31, 0xFF	; 255
 2fc:	0c 94 bb 02 	jmp	0x576	; 0x576 <__tablejump2__>
	{
		case ADC_0 :
		ADMUX |= 0x00;
 300:	87 b1       	in	r24, 0x07	; 7
 302:	87 b9       	out	0x07, r24	; 7
		break;
 304:	1b c0       	rjmp	.+54     	; 0x33c <ADC_Read+0x4e>
		case ADC_1 :
		ADMUX |= 0x01;
 306:	87 b1       	in	r24, 0x07	; 7
 308:	81 60       	ori	r24, 0x01	; 1
 30a:	87 b9       	out	0x07, r24	; 7
		break;
 30c:	17 c0       	rjmp	.+46     	; 0x33c <ADC_Read+0x4e>
		case ADC_2 :
		ADMUX |= 0x02;
 30e:	87 b1       	in	r24, 0x07	; 7
 310:	82 60       	ori	r24, 0x02	; 2
 312:	87 b9       	out	0x07, r24	; 7
		break;
 314:	13 c0       	rjmp	.+38     	; 0x33c <ADC_Read+0x4e>
		case ADC_3 :
		ADMUX |= 0x03;
 316:	87 b1       	in	r24, 0x07	; 7
 318:	83 60       	ori	r24, 0x03	; 3
 31a:	87 b9       	out	0x07, r24	; 7
		break;
 31c:	0f c0       	rjmp	.+30     	; 0x33c <ADC_Read+0x4e>
		case ADC_4 :
		ADMUX |= 0x04;
 31e:	87 b1       	in	r24, 0x07	; 7
 320:	84 60       	ori	r24, 0x04	; 4
 322:	87 b9       	out	0x07, r24	; 7
		break;
 324:	0b c0       	rjmp	.+22     	; 0x33c <ADC_Read+0x4e>
		case ADC_5 :
		ADMUX |= 0x05;
 326:	87 b1       	in	r24, 0x07	; 7
 328:	85 60       	ori	r24, 0x05	; 5
 32a:	87 b9       	out	0x07, r24	; 7
		break;
 32c:	07 c0       	rjmp	.+14     	; 0x33c <ADC_Read+0x4e>
		case ADC_6 :
		ADMUX |= 0x06;
 32e:	87 b1       	in	r24, 0x07	; 7
 330:	86 60       	ori	r24, 0x06	; 6
 332:	87 b9       	out	0x07, r24	; 7
		break;
 334:	03 c0       	rjmp	.+6      	; 0x33c <ADC_Read+0x4e>
		case ADC_7 :
		ADMUX |= 0x07;
 336:	87 b1       	in	r24, 0x07	; 7
 338:	87 60       	ori	r24, 0x07	; 7
 33a:	87 b9       	out	0x07, r24	; 7
		break;
	}
	ADCSRA |= 0x40;
 33c:	86 b1       	in	r24, 0x06	; 6
 33e:	80 64       	ori	r24, 0x40	; 64
 340:	86 b9       	out	0x06, r24	; 6

}
 342:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

000000be <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
  be:	44 23       	and	r20, r20
  c0:	19 f0       	breq	.+6      	; 0xc8 <DIO_SetPinDirection+0xa>
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	c9 f1       	breq	.+114    	; 0x138 <DIO_SetPinDirection+0x7a>
  c6:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
  c8:	81 30       	cpi	r24, 0x01	; 1
  ca:	91 f0       	breq	.+36     	; 0xf0 <DIO_SetPinDirection+0x32>
  cc:	28 f0       	brcs	.+10     	; 0xd8 <DIO_SetPinDirection+0x1a>
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	d9 f0       	breq	.+54     	; 0x108 <DIO_SetPinDirection+0x4a>
  d2:	83 30       	cpi	r24, 0x03	; 3
  d4:	29 f1       	breq	.+74     	; 0x120 <DIO_SetPinDirection+0x62>
  d6:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
  d8:	2a b3       	in	r18, 0x1a	; 26
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <DIO_SetPinDirection+0x26>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <DIO_SetPinDirection+0x22>
  e8:	80 95       	com	r24
  ea:	82 23       	and	r24, r18
  ec:	8a bb       	out	0x1a, r24	; 26
			break;
  ee:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
  f0:	27 b3       	in	r18, 0x17	; 23
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_SetPinDirection+0x3e>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_SetPinDirection+0x3a>
 100:	80 95       	com	r24
 102:	82 23       	and	r24, r18
 104:	87 bb       	out	0x17, r24	; 23
			break;
 106:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_SetPinDirection+0x56>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_SetPinDirection+0x52>
 118:	80 95       	com	r24
 11a:	82 23       	and	r24, r18
 11c:	84 bb       	out	0x14, r24	; 20
			break;
 11e:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 120:	21 b3       	in	r18, 0x11	; 17
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_SetPinDirection+0x6e>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_SetPinDirection+0x6a>
 130:	80 95       	com	r24
 132:	82 23       	and	r24, r18
 134:	81 bb       	out	0x11, r24	; 17
			break;
 136:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	89 f0       	breq	.+34     	; 0x15e <DIO_SetPinDirection+0xa0>
 13c:	28 f0       	brcs	.+10     	; 0x148 <DIO_SetPinDirection+0x8a>
 13e:	82 30       	cpi	r24, 0x02	; 2
 140:	c9 f0       	breq	.+50     	; 0x174 <DIO_SetPinDirection+0xb6>
 142:	83 30       	cpi	r24, 0x03	; 3
 144:	11 f1       	breq	.+68     	; 0x18a <DIO_SetPinDirection+0xcc>
 146:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 148:	2a b3       	in	r18, 0x1a	; 26
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPinDirection+0x96>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPinDirection+0x92>
 158:	82 2b       	or	r24, r18
 15a:	8a bb       	out	0x1a, r24	; 26
			break;
 15c:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 15e:	27 b3       	in	r18, 0x17	; 23
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_SetPinDirection+0xac>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	6a 95       	dec	r22
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_SetPinDirection+0xa8>
 16e:	82 2b       	or	r24, r18
 170:	87 bb       	out	0x17, r24	; 23
			break;
 172:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 174:	24 b3       	in	r18, 0x14	; 20
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	02 c0       	rjmp	.+4      	; 0x180 <DIO_SetPinDirection+0xc2>
 17c:	88 0f       	add	r24, r24
 17e:	99 1f       	adc	r25, r25
 180:	6a 95       	dec	r22
 182:	e2 f7       	brpl	.-8      	; 0x17c <DIO_SetPinDirection+0xbe>
 184:	82 2b       	or	r24, r18
 186:	84 bb       	out	0x14, r24	; 20
			break;
 188:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 18a:	21 b3       	in	r18, 0x11	; 17
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	02 c0       	rjmp	.+4      	; 0x196 <DIO_SetPinDirection+0xd8>
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	6a 95       	dec	r22
 198:	e2 f7       	brpl	.-8      	; 0x192 <DIO_SetPinDirection+0xd4>
 19a:	82 2b       	or	r24, r18
 19c:	81 bb       	out	0x11, r24	; 17
 19e:	08 95       	ret

Disassembly of section .text:

00000582 <__cmpsf2>:
 582:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__fp_cmp>
 586:	08 f4       	brcc	.+2      	; 0x58a <__cmpsf2+0x8>
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	08 95       	ret

Disassembly of section .text:

00000274 <__floatunsisf>:
 274:	e8 94       	clt
 276:	09 c0       	rjmp	.+18     	; 0x28a <__floatsisf+0x12>

00000278 <__floatsisf>:
 278:	97 fb       	bst	r25, 7
 27a:	3e f4       	brtc	.+14     	; 0x28a <__floatsisf+0x12>
 27c:	90 95       	com	r25
 27e:	80 95       	com	r24
 280:	70 95       	com	r23
 282:	61 95       	neg	r22
 284:	7f 4f       	sbci	r23, 0xFF	; 255
 286:	8f 4f       	sbci	r24, 0xFF	; 255
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	99 23       	and	r25, r25
 28c:	a9 f0       	breq	.+42     	; 0x2b8 <__floatsisf+0x40>
 28e:	f9 2f       	mov	r31, r25
 290:	96 e9       	ldi	r25, 0x96	; 150
 292:	bb 27       	eor	r27, r27
 294:	93 95       	inc	r25
 296:	f6 95       	lsr	r31
 298:	87 95       	ror	r24
 29a:	77 95       	ror	r23
 29c:	67 95       	ror	r22
 29e:	b7 95       	ror	r27
 2a0:	f1 11       	cpse	r31, r1
 2a2:	f8 cf       	rjmp	.-16     	; 0x294 <__floatsisf+0x1c>
 2a4:	fa f4       	brpl	.+62     	; 0x2e4 <__floatsisf+0x6c>
 2a6:	bb 0f       	add	r27, r27
 2a8:	11 f4       	brne	.+4      	; 0x2ae <__floatsisf+0x36>
 2aa:	60 ff       	sbrs	r22, 0
 2ac:	1b c0       	rjmp	.+54     	; 0x2e4 <__floatsisf+0x6c>
 2ae:	6f 5f       	subi	r22, 0xFF	; 255
 2b0:	7f 4f       	sbci	r23, 0xFF	; 255
 2b2:	8f 4f       	sbci	r24, 0xFF	; 255
 2b4:	9f 4f       	sbci	r25, 0xFF	; 255
 2b6:	16 c0       	rjmp	.+44     	; 0x2e4 <__floatsisf+0x6c>
 2b8:	88 23       	and	r24, r24
 2ba:	11 f0       	breq	.+4      	; 0x2c0 <__floatsisf+0x48>
 2bc:	96 e9       	ldi	r25, 0x96	; 150
 2be:	11 c0       	rjmp	.+34     	; 0x2e2 <__floatsisf+0x6a>
 2c0:	77 23       	and	r23, r23
 2c2:	21 f0       	breq	.+8      	; 0x2cc <__floatsisf+0x54>
 2c4:	9e e8       	ldi	r25, 0x8E	; 142
 2c6:	87 2f       	mov	r24, r23
 2c8:	76 2f       	mov	r23, r22
 2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <__floatsisf+0x5e>
 2cc:	66 23       	and	r22, r22
 2ce:	71 f0       	breq	.+28     	; 0x2ec <__floatsisf+0x74>
 2d0:	96 e8       	ldi	r25, 0x86	; 134
 2d2:	86 2f       	mov	r24, r22
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	60 e0       	ldi	r22, 0x00	; 0
 2d8:	2a f0       	brmi	.+10     	; 0x2e4 <__floatsisf+0x6c>
 2da:	9a 95       	dec	r25
 2dc:	66 0f       	add	r22, r22
 2de:	77 1f       	adc	r23, r23
 2e0:	88 1f       	adc	r24, r24
 2e2:	da f7       	brpl	.-10     	; 0x2da <__floatsisf+0x62>
 2e4:	88 0f       	add	r24, r24
 2e6:	96 95       	lsr	r25
 2e8:	87 95       	ror	r24
 2ea:	97 f9       	bld	r25, 7
 2ec:	08 95       	ret

Disassembly of section .text:

000003d6 <__fp_cmp>:
 3d6:	99 0f       	add	r25, r25
 3d8:	00 08       	sbc	r0, r0
 3da:	55 0f       	add	r21, r21
 3dc:	aa 0b       	sbc	r26, r26
 3de:	e0 e8       	ldi	r30, 0x80	; 128
 3e0:	fe ef       	ldi	r31, 0xFE	; 254
 3e2:	16 16       	cp	r1, r22
 3e4:	17 06       	cpc	r1, r23
 3e6:	e8 07       	cpc	r30, r24
 3e8:	f9 07       	cpc	r31, r25
 3ea:	c0 f0       	brcs	.+48     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3ec:	12 16       	cp	r1, r18
 3ee:	13 06       	cpc	r1, r19
 3f0:	e4 07       	cpc	r30, r20
 3f2:	f5 07       	cpc	r31, r21
 3f4:	98 f0       	brcs	.+38     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f6:	62 1b       	sub	r22, r18
 3f8:	73 0b       	sbc	r23, r19
 3fa:	84 0b       	sbc	r24, r20
 3fc:	95 0b       	sbc	r25, r21
 3fe:	39 f4       	brne	.+14     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 400:	0a 26       	eor	r0, r26
 402:	61 f0       	breq	.+24     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 404:	23 2b       	or	r18, r19
 406:	24 2b       	or	r18, r20
 408:	25 2b       	or	r18, r21
 40a:	21 f4       	brne	.+8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 40c:	08 95       	ret
 40e:	0a 26       	eor	r0, r26
 410:	09 f4       	brne	.+2      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 412:	a1 40       	sbci	r26, 0x01	; 1
 414:	a6 95       	lsr	r26
 416:	8f ef       	ldi	r24, 0xFF	; 255
 418:	81 1d       	adc	r24, r1
 41a:	81 1d       	adc	r24, r1
 41c:	08 95       	ret

Disassembly of section .text:

0000058c <__mulsf3>:
 58c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <__mulsf3x>
 590:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_round>

Disassembly of section .text:

000001a0 <__mulsf3x>:
 1a0:	0f c0       	rjmp	.+30     	; 0x1c0 <__mulsf3x+0x20>
 1a2:	0e 94 94 02 	call	0x528	; 0x528 <__fp_pscA>
 1a6:	38 f0       	brcs	.+14     	; 0x1b6 <__mulsf3x+0x16>
 1a8:	0e 94 9b 02 	call	0x536	; 0x536 <__fp_pscB>
 1ac:	20 f0       	brcs	.+8      	; 0x1b6 <__mulsf3x+0x16>
 1ae:	95 23       	and	r25, r21
 1b0:	11 f0       	breq	.+4      	; 0x1b6 <__mulsf3x+0x16>
 1b2:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_inf>
 1b6:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <__fp_nan>
 1ba:	11 24       	eor	r1, r1
 1bc:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
 1c0:	0e 94 0f 02 	call	0x41e	; 0x41e <__fp_split3>
 1c4:	70 f3       	brcs	.-36     	; 0x1a2 <__mulsf3x+0x2>

000001c6 <__mulsf3_pse>:
 1c6:	95 9f       	mul	r25, r21
 1c8:	c1 f3       	breq	.-16     	; 0x1ba <__mulsf3x+0x1a>
 1ca:	95 0f       	add	r25, r21
 1cc:	50 e0       	ldi	r21, 0x00	; 0
 1ce:	55 1f       	adc	r21, r21
 1d0:	62 9f       	mul	r22, r18
 1d2:	f0 01       	movw	r30, r0
 1d4:	72 9f       	mul	r23, r18
 1d6:	bb 27       	eor	r27, r27
 1d8:	f0 0d       	add	r31, r0
 1da:	b1 1d       	adc	r27, r1
 1dc:	63 9f       	mul	r22, r19
 1de:	aa 27       	eor	r26, r26
 1e0:	f0 0d       	add	r31, r0
 1e2:	b1 1d       	adc	r27, r1
 1e4:	aa 1f       	adc	r26, r26
 1e6:	64 9f       	mul	r22, r20
 1e8:	66 27       	eor	r22, r22
 1ea:	b0 0d       	add	r27, r0
 1ec:	a1 1d       	adc	r26, r1
 1ee:	66 1f       	adc	r22, r22
 1f0:	82 9f       	mul	r24, r18
 1f2:	22 27       	eor	r18, r18
 1f4:	b0 0d       	add	r27, r0
 1f6:	a1 1d       	adc	r26, r1
 1f8:	62 1f       	adc	r22, r18
 1fa:	73 9f       	mul	r23, r19
 1fc:	b0 0d       	add	r27, r0
 1fe:	a1 1d       	adc	r26, r1
 200:	62 1f       	adc	r22, r18
 202:	83 9f       	mul	r24, r19
 204:	a0 0d       	add	r26, r0
 206:	61 1d       	adc	r22, r1
 208:	22 1f       	adc	r18, r18
 20a:	74 9f       	mul	r23, r20
 20c:	33 27       	eor	r19, r19
 20e:	a0 0d       	add	r26, r0
 210:	61 1d       	adc	r22, r1
 212:	23 1f       	adc	r18, r19
 214:	84 9f       	mul	r24, r20
 216:	60 0d       	add	r22, r0
 218:	21 1d       	adc	r18, r1
 21a:	82 2f       	mov	r24, r18
 21c:	76 2f       	mov	r23, r22
 21e:	6a 2f       	mov	r22, r26
 220:	11 24       	eor	r1, r1
 222:	9f 57       	subi	r25, 0x7F	; 127
 224:	50 40       	sbci	r21, 0x00	; 0
 226:	9a f0       	brmi	.+38     	; 0x24e <__mulsf3_pse+0x88>
 228:	f1 f0       	breq	.+60     	; 0x266 <__mulsf3_pse+0xa0>
 22a:	88 23       	and	r24, r24
 22c:	4a f0       	brmi	.+18     	; 0x240 <__mulsf3_pse+0x7a>
 22e:	ee 0f       	add	r30, r30
 230:	ff 1f       	adc	r31, r31
 232:	bb 1f       	adc	r27, r27
 234:	66 1f       	adc	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	91 50       	subi	r25, 0x01	; 1
 23c:	50 40       	sbci	r21, 0x00	; 0
 23e:	a9 f7       	brne	.-22     	; 0x22a <__mulsf3_pse+0x64>
 240:	9e 3f       	cpi	r25, 0xFE	; 254
 242:	51 05       	cpc	r21, r1
 244:	80 f0       	brcs	.+32     	; 0x266 <__mulsf3_pse+0xa0>
 246:	0c 94 b5 02 	jmp	0x56a	; 0x56a <__fp_inf>
 24a:	0c 94 a3 02 	jmp	0x546	; 0x546 <__fp_szero>
 24e:	5f 3f       	cpi	r21, 0xFF	; 255
 250:	e4 f3       	brlt	.-8      	; 0x24a <__mulsf3_pse+0x84>
 252:	98 3e       	cpi	r25, 0xE8	; 232
 254:	d4 f3       	brlt	.-12     	; 0x24a <__mulsf3_pse+0x84>
 256:	86 95       	lsr	r24
 258:	77 95       	ror	r23
 25a:	67 95       	ror	r22
 25c:	b7 95       	ror	r27
 25e:	f7 95       	ror	r31
 260:	e7 95       	ror	r30
 262:	9f 5f       	subi	r25, 0xFF	; 255
 264:	c1 f7       	brne	.-16     	; 0x256 <__mulsf3_pse+0x90>
 266:	fe 2b       	or	r31, r30
 268:	88 0f       	add	r24, r24
 26a:	91 1d       	adc	r25, r1
 26c:	96 95       	lsr	r25
 26e:	87 95       	ror	r24
 270:	97 f9       	bld	r25, 7
 272:	08 95       	ret

Disassembly of section .text:

0000056a <__fp_inf>:
 56a:	97 f9       	bld	r25, 7
 56c:	9f 67       	ori	r25, 0x7F	; 127
 56e:	80 e8       	ldi	r24, 0x80	; 128
 570:	70 e0       	ldi	r23, 0x00	; 0
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	08 95       	ret

Disassembly of section .text:

000005a0 <__fp_nan>:
 5a0:	9f ef       	ldi	r25, 0xFF	; 255
 5a2:	80 ec       	ldi	r24, 0xC0	; 192
 5a4:	08 95       	ret

Disassembly of section .text:

00000528 <__fp_pscA>:
 528:	00 24       	eor	r0, r0
 52a:	0a 94       	dec	r0
 52c:	16 16       	cp	r1, r22
 52e:	17 06       	cpc	r1, r23
 530:	18 06       	cpc	r1, r24
 532:	09 06       	cpc	r0, r25
 534:	08 95       	ret

Disassembly of section .text:

00000536 <__fp_pscB>:
 536:	00 24       	eor	r0, r0
 538:	0a 94       	dec	r0
 53a:	12 16       	cp	r1, r18
 53c:	13 06       	cpc	r1, r19
 53e:	14 06       	cpc	r1, r20
 540:	05 06       	cpc	r0, r21
 542:	08 95       	ret

Disassembly of section .text:

000004c4 <__fp_round>:
 4c4:	09 2e       	mov	r0, r25
 4c6:	03 94       	inc	r0
 4c8:	00 0c       	add	r0, r0
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__fp_round+0xc>
 4cc:	88 23       	and	r24, r24
 4ce:	52 f0       	brmi	.+20     	; 0x4e4 <__fp_round+0x20>
 4d0:	bb 0f       	add	r27, r27
 4d2:	40 f4       	brcc	.+16     	; 0x4e4 <__fp_round+0x20>
 4d4:	bf 2b       	or	r27, r31
 4d6:	11 f4       	brne	.+4      	; 0x4dc <__fp_round+0x18>
 4d8:	60 ff       	sbrs	r22, 0
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <__fp_round+0x20>
 4dc:	6f 5f       	subi	r22, 0xFF	; 255
 4de:	7f 4f       	sbci	r23, 0xFF	; 255
 4e0:	8f 4f       	sbci	r24, 0xFF	; 255
 4e2:	9f 4f       	sbci	r25, 0xFF	; 255
 4e4:	08 95       	ret

Disassembly of section .text:

0000041e <__fp_split3>:
 41e:	57 fd       	sbrc	r21, 7
 420:	90 58       	subi	r25, 0x80	; 128
 422:	44 0f       	add	r20, r20
 424:	55 1f       	adc	r21, r21
 426:	59 f0       	breq	.+22     	; 0x43e <__fp_splitA+0x10>
 428:	5f 3f       	cpi	r21, 0xFF	; 255
 42a:	71 f0       	breq	.+28     	; 0x448 <__fp_splitA+0x1a>
 42c:	47 95       	ror	r20

0000042e <__fp_splitA>:
 42e:	88 0f       	add	r24, r24
 430:	97 fb       	bst	r25, 7
 432:	99 1f       	adc	r25, r25
 434:	61 f0       	breq	.+24     	; 0x44e <__fp_splitA+0x20>
 436:	9f 3f       	cpi	r25, 0xFF	; 255
 438:	79 f0       	breq	.+30     	; 0x458 <__fp_splitA+0x2a>
 43a:	87 95       	ror	r24
 43c:	08 95       	ret
 43e:	12 16       	cp	r1, r18
 440:	13 06       	cpc	r1, r19
 442:	14 06       	cpc	r1, r20
 444:	55 1f       	adc	r21, r21
 446:	f2 cf       	rjmp	.-28     	; 0x42c <__fp_split3+0xe>
 448:	46 95       	lsr	r20
 44a:	f1 df       	rcall	.-30     	; 0x42e <__fp_splitA>
 44c:	08 c0       	rjmp	.+16     	; 0x45e <__fp_splitA+0x30>
 44e:	16 16       	cp	r1, r22
 450:	17 06       	cpc	r1, r23
 452:	18 06       	cpc	r1, r24
 454:	99 1f       	adc	r25, r25
 456:	f1 cf       	rjmp	.-30     	; 0x43a <__fp_splitA+0xc>
 458:	86 95       	lsr	r24
 45a:	71 05       	cpc	r23, r1
 45c:	61 05       	cpc	r22, r1
 45e:	08 94       	sec
 460:	08 95       	ret

Disassembly of section .text:

00000544 <__fp_zero>:
 544:	e8 94       	clt

00000546 <__fp_szero>:
 546:	bb 27       	eor	r27, r27
 548:	66 27       	eor	r22, r22
 54a:	77 27       	eor	r23, r23
 54c:	cb 01       	movw	r24, r22
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret

Disassembly of section .text.libgcc:

00000576 <__tablejump2__>:
 576:	ee 0f       	add	r30, r30
 578:	ff 1f       	adc	r31, r31
 57a:	05 90       	lpm	r0, Z+
 57c:	f4 91       	lpm	r31, Z
 57e:	e0 2d       	mov	r30, r0
 580:	09 94       	ijmp

Disassembly of section .text.__dummy_fini:

000005ae <_fini>:
 5ae:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000005b0 <__funcs_on_exit>:
 5b0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000005b2 <__simulator_exit>:
 5b2:	08 95       	ret

Disassembly of section .text.exit:

00000500 <exit>:
 500:	ec 01       	movw	r28, r24
 502:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <__funcs_on_exit>
 506:	0e 94 d7 02 	call	0x5ae	; 0x5ae <_fini>
 50a:	ce 01       	movw	r24, r28
 50c:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__simulator_exit>
 510:	ce 01       	movw	r24, r28
 512:	0e 94 d5 02 	call	0x5aa	; 0x5aa <_Exit>

Disassembly of section .text._Exit:

000005aa <_Exit>:
 5aa:	0e 94 5d 00 	call	0xba	; 0xba <_exit>

Disassembly of section .text.avrlibc:

00000516 <eeprom_read_byte>:
 516:	cb 01       	movw	r24, r22
 518:	e1 99       	sbic	0x1c, 1	; 28
 51a:	fe cf       	rjmp	.-4      	; 0x518 <eeprom_read_byte+0x2>
 51c:	9f bb       	out	0x1f, r25	; 31
 51e:	8e bb       	out	0x1e, r24	; 30
 520:	e0 9a       	sbi	0x1c, 0	; 28
 522:	99 27       	eor	r25, r25
 524:	8d b3       	in	r24, 0x1d	; 29
 526:	08 95       	ret

Disassembly of section .text.avrlibc:

000004e6 <eeprom_write_byte>:
 4e6:	26 2f       	mov	r18, r22

000004e8 <eeprom_write_r18>:
 4e8:	e1 99       	sbic	0x1c, 1	; 28
 4ea:	fe cf       	rjmp	.-4      	; 0x4e8 <eeprom_write_r18>
 4ec:	9f bb       	out	0x1f, r25	; 31
 4ee:	8e bb       	out	0x1e, r24	; 30
 4f0:	2d bb       	out	0x1d, r18	; 29
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	e2 9a       	sbi	0x1c, 2	; 28
 4f8:	e1 9a       	sbi	0x1c, 1	; 28
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	01 96       	adiw	r24, 0x01	; 1
 4fe:	08 95       	ret
